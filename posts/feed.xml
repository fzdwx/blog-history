<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on fzdwx</title>
    <link>https://fzdwx.github.io/posts/</link>
    <description>Recent content in Posts on fzdwx</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 27 Sep 2022 21:45:29 +0800</lastBuildDate><atom:link href="https://fzdwx.github.io/posts/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>mit 6.824 lab1 思路</title>
      <link>https://fzdwx.github.io/posts/2022-09-27-mit6.824-lab1/</link>
      <pubDate>Tue, 27 Sep 2022 21:45:29 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-09-27-mit6.824-lab1/</guid>
      <description>about mit6.824 lab1(Map reduce framework)</description>
      <content:encoded><![CDATA[<p>看的时候很懵，写的时候更懵，我以为是要写几个<code>MapReduce</code>的程序，在把官方的<code>A few rules</code>以及<code>Hints</code>(
翻译可以看<a href="https://www.nowcoder.com/discuss/962675">这里</a>) 仔细的阅读了几遍后才发现是要写一个
MapReduce 的调度框架。。。</p>
<p>解题思路可以分为 3 步。</p>
<ol>
<li><code>worker</code>与<code>master</code>先通过<code>rpc</code>进行通信，即<code>worker</code>发送请求，<code>master</code>能够正确的应答且<code>worker</code>
能够收到。这一部分其实示例代码已经给到了，可以模仿着写一个从<code>master</code>获取需要执行的任务名称的<code>rpc request</code>。</li>
<li>上面一步完成后就可以进行真正的<code>Map task</code>请求以及执行了:
<ul>
<li><code>Map task</code>何时生成？</li>
<li>每个<code>worker</code>只向<code>master</code>请求一次就好了吗？</li>
<li><code>Map task</code>执行 超时/失败 需要有重试机制吗？</li>
<li>如何保证<code>Map task</code>消费时的线程安全？</li>
</ul>
</li>
<li>当所有的<code>Map task</code>执行完毕后就需要执行<code>Reduce task</code>了，如果你写完了第 2 步，那么<code>Reduce task</code>其实就是水到渠成了。
<ul>
<li>生成<code>Reduce task</code>，这里的每个<code>Reduce task</code>需要加载的文件按什么分成一组？</li>
<li>剩下的与<code>Map task</code>处理方法相同。</li>
</ul>
</li>
</ol>
<hr>
<p>我就是卡在了<code>Reduce task</code>创建时文件分组这个地方了，我直接把同一个<code>Map task</code>生成的文件当成一组了&hellip;但是显然不是这样。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>About rofi</title>
      <link>https://fzdwx.github.io/posts/2022-09-18-about-rofi/</link>
      <pubDate>Sun, 18 Sep 2022 22:15:39 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-09-18-about-rofi/</guid>
      <description>一个 linux 下的 application launcher, 让你只用键盘就可以进行应用的启动与切换。</description>
      <content:encoded><![CDATA[<h2 id="rofi">rofi</h2>
<p>今天发现了一个 linux 下的 application launcher <a href="https://github.com/davatorium/rofi">rofi</a>，它可以快速切换窗口和启动程序。
我用它和 <code>wmctrl</code> 进行配合使用。</p>
<p><strong>我的使用过程</strong>：</p>
<p>1.archlinux install</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">yay -S rofi
</span></span></code></pre></div><p>2.添加自定义快捷键绑定 hotkey 为<code>alt</code>+<code>space</code>触发<code>rofi -show</code>。</p>
<p>3.press<code>alt</code>+<code>space</code>，然后使用<code>shift</code>+<code>left</code>or<code>right</code>进行切换 mode 。</p>
<hr>
<p><strong>更改主题以及显示 icon</strong>:</p>
<p>1.生成配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir -p ~/.config/rofi
</span></span><span class="line"><span class="cl">rofi -dump-config &gt; ~/.config/rofi/config.rasi
</span></span></code></pre></div><p>2.显示icon</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sed -i <span class="s1">&#39;8c show-icons: true;&#39;</span> ~/.config/rofi/config.rasi
</span></span></code></pre></div><p>3.更换主题</p>
<p>参考 <a href="https://github.com/lr-tech/rofi-themes-collection#installing-themes">https://github.com/lr-tech/rofi-themes-collection#installing-themes</a></p>
<h2 id="wmctrl">wmctrl</h2>
<p><strong>我的<code>wmctrl</code>的配置示例</strong>:</p>
<p>使用<code>xprop WM_CLASS</code>获取前缀。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">chrome</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a google-chrome || google-chrome-stable &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">note</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a obsidian || /usr/bin/obsidian &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">codew</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a code || /opt/code/code &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">idea</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a jetbrains-idea || /opt/idea/bin/idea.sh &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">discord</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a discord || /opt/discord/Discord &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
