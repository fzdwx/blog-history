<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mit6.824 on fzdwx</title>
    <link>https://fzdwx.github.io/tags/mit6.824/</link>
    <description>Recent content in mit6.824 on fzdwx</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright [fzdwx](https://github.com/fzdwx) since 2022</copyright>
    <lastBuildDate>Mon, 10 Oct 2022 22:26:55 +0800</lastBuildDate><atom:link href="https://fzdwx.github.io/tags/mit6.824/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Raft Kv</title>
      <link>https://fzdwx.github.io/posts/2022-10-10-raftkv/</link>
      <pubDate>Mon, 10 Oct 2022 22:26:55 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-10-10-raftkv/</guid>
      <description>Lab2文档翻译 Introduction 这是一系列实验中的第一个，我们将构建一个fault-tolerant key/value storage system。在本实验中我们将实现Raft(一 种复制的状态机协议)。在下一个实验中，我们将在Raft上构建一个key/value service。然后，您将在多个复制的状态机上进行shard来提高性能。
复制的服务通过在多个复制服务器上存储其状态(即数据)的完整副本来实现fault tolerance。即使有一些服务器出现故障(崩溃或网络断开和抖动)replication也允许它们继续运行。挑战在于failures 可能导致副本存在不同的数据。
Raft将客户端的请求组织成一个序列，被成为log，并且确保所有replica servers看到相同的log。每个副本按照日志的顺序来执行客户端的请求，将它们应用于其本地的服务状态副本。由于所有存活的副本读取的日志内容都是相同的，所以都以相同的顺序来执行请求，因此它们都有相同的服务状态。如果一个服务器失败了但是后来又恢复来，Raft会复制把它的日志更新。只要至少大多数的服务器还或者，并且能够继续通信，那么Raft将继续运行。如果没有到达这个数量，那么Raft将会停止运行，直到到达这个数量才会重新开始。
在本 lab 中，你将把Raft实现为一个带有相关方法的 GO 的对象类型，目的是为了能在更大的模块中使用。一组Raft实例通过RPC来维护replicated logs。你的Raft实例将支持一连串不确定编号(数量?)的command，也可以叫log entries。这些entries 通过索引来进行编号。具有给定索引的log entry将被提交，此时，您的Raft应该将这个条log发送到更大的服务上执行。
你应该遵循 extended Raft paper 中设计，特别是图 2.你将实现论文宏的大部分内容，包括保存持久化状态和节点故障自动重启后读取状态。你将不会实现集群成员的变化(Section 6)。
你可能会发现这个 指南 很有用，还有这个关于 concurrency 的 锁 和 结构 的建议，如果需要更广泛的视角，可以看看Paxos, Chubby, Paxos Made Live, Spanner, Zookeeper, Harp, Viewstamped Replication 和 Bolosky et al 。
请记住，本 lab 中最具挑战性的部分可能不是实现你的解决方案，而是调试它。为了帮助应对这一挑战，你可能需要把事件花在如何使你的实现更容易调试。你可以参考 指导页 和这篇关于有效打印声明的 博文 。
我们还提供了 Raft 交互图 ，可以帮助阐明 Raft 代码如何与上层(使用者?)交互。
The code 通过向raft/raft.go添加代码来实现Raft。在该文件中，你会发现骨架代码，以及如何发送和接收 RPC 的例子。你的实现必须支持以下接口，测试者和（最终）你的键/值服务器将使用该接口。你可以在raft.go的注释中找到更多细节。</description>
      <content:encoded><![CDATA[<h2 id="lab2文档翻译">Lab2文档翻译</h2>
<h3 id="introduction">Introduction</h3>
<p>这是一系列实验中的第一个，我们将构建一个<code>fault-tolerant key/value storage system</code>。在本实验中我们将实现<code>Raft</code>(一
种复制的状态机协议)。在下一个实验中，我们将在<code>Raft</code>上构建一个<code>key/value service</code>。然后，您将在多个复制的状态机上进行<code>shard</code>来提高性能。</p>
<p>复制的服务通过在多个复制服务器上存储其状态(即数据)的完整副本来实现<code>fault tolerance</code>。即使有一些服务器出现故障(崩溃或网络断开和抖动)<code>replication</code>也允许它们继续运行。挑战在于<strong>failures 可能导致副本存在不同的数据</strong>。</p>
<p><code>Raft</code>将客户端的请求组织成一个序列，被成为<code>log</code>，并且确保所有<code>replica servers</code>看到相同的<code>log</code>。每个副本按照日志的顺序来执行客户端的请求，将它们应用于其本地的服务状态副本。由于<strong>所有存活的副本读取的日志内容都是相同的，所以都以相同的顺序来执行请求，因此它们都有相同的服务状态</strong>。如果一个服务器失败了但是后来又恢复来，<code>Raft</code>会复制把它的日志更新。只要至少大多数的服务器还或者，并且能够继续通信，那么<code>Raft</code>将继续运行。如果没有到达这个数量，那么<code>Raft</code>将会停止运行，直到到达这个数量才会重新开始。</p>
<p>在本 lab 中，你将把<code>Raft</code>实现为一个带有相关方法的 GO 的对象类型，目的是为了能在更大的模块中使用。一组<code>Raft</code>实例通过<code>RPC</code>来维护<code>replicated logs</code>。你的<code>Raft</code>实例将支持一连串不确定编号(数量?)的<code>command</code>，也可以叫<code>log entries</code>。这些<code>entries</code>
通过索引来进行编号。具有给定索引的<code>log entry</code>将被提交，此时，您的<code>Raft</code>应该将这个条<code>log</code>发送到更大的服务上执行。</p>
<p>你应该遵循 <a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank" rel="noopener">extended Raft paper</a>
中设计，特别是图 2.你将实现论文宏的大部分内容，包括<strong>保存持久化状态</strong>和节<strong>点故障自动重启后读取状态</strong>。你将不会实现集群成员的变化(Section 6)。</p>
<p>你可能会发现这个 <a href="https://thesquareplanet.com/blog/students-guide-to-raft/" target="_blank" rel="noopener">指南</a>
很有用，还有这个关于 concurrency 的 <a href="https://pdos.csail.mit.edu/6.824/labs/raft-locking.txt" target="_blank" rel="noopener">锁</a>
和 <a href="https://pdos.csail.mit.edu/6.824/labs/raft-structure.txt" target="_blank" rel="noopener">结构</a>
的建议，如果需要更广泛的视角，可以看看<code>Paxos, Chubby, Paxos Made Live, Spanner, Zookeeper, Harp, Viewstamped Replication</code> 和 <a href="https://static.usenix.org/event/nsdi11/tech/full_papers/Bolosky.pdf" target="_blank" rel="noopener">Bolosky et al</a>
。</p>
<p>请记住，本 lab 中最具挑战性的部分可能不是实现你的解决方案，而是调试它。为了帮助应对这一挑战，你可能需要把事件花在如何使你的实现更容易调试。你可以参考 <a href="https://pdos.csail.mit.edu/6.824/labs/guidance.html" target="_blank" rel="noopener">指导页</a>
和这篇关于有效打印声明的 <a href="https://blog.josejg.com/debugging-pretty/" target="_blank" rel="noopener">博文</a>
。</p>
<p>我们还提供了 <a href="https://pdos.csail.mit.edu/6.824/notes/raft_diagram.pdf" target="_blank" rel="noopener">Raft 交互图</a>
，可以帮助阐明 <code>Raft</code> 代码如何与上层(使用者?)交互。</p>
<h3 id="the-code">The code</h3>
<p>通过向<code>raft/raft.go</code>添加代码来实现<code>Raft</code>。在该文件中，你会发现骨架代码，以及如何发送和接收 RPC 的例子。你的实现必须支持以下接口，测试者和（最终）你的键/值服务器将使用该接口。你可以在<code>raft.go</code>的注释中找到更多细节。</p>





<div class="tip custom-block">
    <p class="custom-block-title">
        
        
            TIP
        
    </p>
    <p> raft 实例只能通过 rpc 进行通信且必须使用<code>labrpc</code>这个包(例如不能使用文件以及共享变量)。 </p>
</div>

<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-go" data-lang="go"><span class="line"><span class="cl"><span class="c1">// create a new Raft server instance:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">rf</span> <span class="o">:=</span> <span class="nf">Make</span><span class="p">(</span><span class="nx">peers</span><span class="p">,</span> <span class="nx">me</span><span class="p">,</span> <span class="nx">persister</span><span class="p">,</span> <span class="nx">applyCh</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// start agreement on a new log entry:
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">rf</span><span class="p">.</span><span class="nf">Start</span><span class="p">(</span><span class="nx">command</span> <span class="kd">interface</span><span class="p">{})</span> <span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="nx">term</span><span class="p">,</span> <span class="nx">isleader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// ask a Raft for its current term, and whether it thinks it is leader
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="nx">rf</span><span class="p">.</span><span class="nf">GetState</span><span class="p">()</span> <span class="p">(</span><span class="nx">term</span><span class="p">,</span> <span class="nx">isLeader</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1">// each time a new entry is committed to the log, each Raft peer
</span></span></span><span class="line"><span class="cl"><span class="c1">// should send an ApplyMsg to the service (or tester).
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kd">type</span> <span class="nx">ApplyMsg</span>
</span></span></code></pre></div><h4 id="makepeers-labrpcclientend-me-intpersister-persister-applych-chan-applymsg">Make(peers []*labrpc.ClientEnd, me int,persister *Persister, applyCh chan ApplyMsg)</h4>
<p>用于创建 raft server。</p>
<ol>
<li>所有的 raft server 的端口都在<code>peers[]</code>存放(包括当前的服务)，当前服务的端口可以通过<code>peers[me]</code>来获取。</li>
<li>所有的服务的<code>perrs[]</code>数组都具有相同的顺序。</li>
<li><code>presister</code>是一个用来存放<code>persistent state</code>的地方，并且在初始的时候会保存最具的状态，如果有。</li>
<li><code>applyCh</code>是 service 或 tester 发送消息给 raft 的通道。<code>Make()</code>必须快速返回，所以它应该为一些长时间运行的任务启动<code>goruntines</code>。</li>
</ol>
<h4 id="startcommand-interface-int-int-bool">Start(command interface{}) (int, int, bool)</h4>
<p>使用 rafr 的服务(e.g a k/v server)希望就下一个要追加到 raft 日志的命令达成一致(就是追加到 raft 日志的下一条命令是相同的？)。如果当前 raft server 不是 leader，则返回 false。否则启动协议并<strong>立即返回</strong>，无需等待日志追加完成。<strong>所以无法保证次命令将一定会被提交到 raft 日志中，因为 leader 可能会失败或者在选举中失败</strong>。即使 raft 实例被 kill，这个函数也应该<code>retrun gracefully</code>。</p>
<p>第一个返回值是该命令出现的索引，如果它曾经被提交的话。第二个返回值是当前的术语(???)。如果这个服务器认为它是领导者，第三个返回值是真。</p>
<p>每个新提交的<code>raft log entity</code>都应该发送一个<code>AppliMsg</code>到<code>Make()</code>的<code>applyCh</code>中。</p>
<h3 id="2a">2A</h3>
<p>实现 Raft leader election 以及 heartbeats(<code>AppendEntries</code> RPCs 没有<code>log entries</code>.空的的意思?)。</p>
<p>2A 的目标是: 选出一个 leader，如果没有失败，它仍然是 leader，如果 old leader 失败或者与 old leader 之间的数据包发生丢失则由 new leader 接管。</p>





<div class="tip custom-block">
    <p class="custom-block-title">
        
        
            TIP
        
    </p>
    <p> 这个失败是 leader 出现故障的意思？就是说只要它没出现运行故障或者网络问题就永远是 leader？ </p>
</div>

<p>要点:</p>
<ol>
<li>通过运行<code>go test -run 2A</code>来进行测试你的实现。</li>
<li>按照论文的图 2，主要关系发送和接收<code>RequestVote RPCs</code>，与<code>the Rules for Servers that relate to elections</code>以及<code>the State related to leader election</code>。</li>
<li>添加图 2 中与 leader election 相关的状态到<code>Raft</code>这个结构体中，且还需要定义一个结构来保存每个日志的信息。</li>
<li>实现<code>RequestVote()</code>，这样 raft 服务们就能互相投票了。添加<code>RequestVOteArgs</code>和<code>RequestVoteReply</code>者两个结构体。修改<code>Make()</code>，创建一个 goroutine，用于检查心跳消息，如果有一段时间没有收到 peer 的消息时将发送<code>RequestVote</code>RPCs 来定期发起领导者选举。这样，如果有 leader 了，peer 将知道谁是 leader，或者自己成为 leader。</li>
<li>实现心跳，需要定义一个<code>AppendEntries</code>RPC 结构(尽管你可能还不需要所有参数)，并且让 leader 定期发送它。编写一个<code>AppendEntries</code>RPC 的 handle method，用于重置选举超时，这样当有一个人已经当选时，其他服务器不会又成为 leader。</li>
<li>确保不同 peer 的选举超时不在同一时间发生，否则所有 peer 将只为自己投票，这样就没有人会成为 leader 了。</li>
<li>在测试时，leader 每秒发送的 RPC 请求不能超过 10 次。</li>
<li>在测试时，要求raft在old leader失败后5秒内选举new leader(如果大多数节点仍然能继续通讯)。但是请记住，如果出现split vote(如果数据包丢失或者候选人选择了相同的随机退避时间就有可能发生)，leader选举可能需要多轮。所以必须设置足够短的选举超时(也就是心跳间隔)，即使会选举多轮，也有可能在5秒内完成。</li>
<li>论文的第5.2节提到的选举超时范围是150到300毫秒。只有当leader发送心跳的频率大大高于150毫秒一次时，上面论文提到的范围才有意义。由于在测试时限制每秒10次心跳，所以必须使用比论文中更大的选举超时时间，但是不能太大，因为可能会无法在5秒内完成选举。</li>
<li>如果您的代码无法通过测试，请再次阅读论文中的图2，leader选举的全部逻辑分布在图中多个部分。</li>
<li>不要忘记实现<code>GetState()</code>。</li>
<li>在测试时，如果要关闭一个raft实例，会调用<code>rf.kill()</code>。我们可以调用<code>rf.killed</code>来检查是否被调用了<code>kill()</code>。您可能希望在所有的循环中都这样做，以避免死亡的Raft实例打印混乱的信息。</li>
<li><code>GO RPC</code>只发送名称以大写字母开头的结构体字段。子结构体也必须拥有大写的字段名。</li>
</ol>
<h2 id="raft论文翻译">Raft论文翻译</h2>
<blockquote>
<p>选取一些重要的片段进行翻译</p>
</blockquote>
<h3 id="introduction-1">Introduction</h3>
<p>raft is similar in many ways to existing consensus al-gorithms (most notably, Oki and Liskov’s Viewstamped Replication [29, 22]), but it has several novel features:</p>
<blockquote>
<p>raft算法和已经存在的一致性算法在某些地方很相似(主要是Oki以及Liskov&rsquo;s的Viewstamped Replication)，但是它有以下新特性:</p>
</blockquote>
<ul>
<li><strong>Strong leader</strong>: Raft uses a stronger form of leadership than other consensus algorithms. For example,log entries only flow from the leader to other servers. This simplifies the management of the replicated log and makes Raft easier to understand.</li>
<li><strong>Leader election</strong>: Raft uses randomized timers to elect leaders. This adds only a small amount of mechanism to the heartbeats already required for any consensus algorithm, while resolving conflicts simply and rapidly.</li>
<li><strong>Membership changes</strong>: Raft’s mechanism for changing the set of servers in the cluster uses a new joint consensus approach where the majorities of two different configurations overlap during transitions. This allows the cluster to continue operating normally during configuration changes.</li>
</ul>
<blockquote>
<ul>
<li>强领导者: Raft使用一种比其他一致性算法更强的领导形式。比如，日志只从leader发送给其他服务器。这简化了对复制日志的管理，似的Raft更容易理解。</li>
<li>领导选举: Raft使用随机定时器来选取leader。这种方式仅仅是在所有一致性算法都需要改进的心跳机制上有些许改进，然而这使得Raft在解决冲突时更简单和快速。</li>
<li>成员调整: 在实现调整集群中成员的机制时，Raft使用了新的联合一致性(join consensus)算法。在这种方法中，大多数两种不同配置的机器在转换关系时会交叠(overlap)。这使得在配置改变时，集群能够继续工作。</li>
</ul>
</blockquote>
<h2 id="links">Links</h2>
<ol>
<li>项目地址: <a href="https://pdos.csail.mit.edu/6.824/labs/lab-raft.html" target="_blank" rel="noopener">https://pdos.csail.mit.edu/6.824/labs/lab-raft.html</a>
</li>
<li>GFS 相关资料: <a href="https://fzdwx.github.io/posts/2022-10-07-gfs/#links" target="_blank" rel="noopener">https://fzdwx.github.io/posts/2022-10-07-gfs/#links</a>
</li>
<li>Raft paper: <a href="https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf" target="_blank" rel="noopener">https://pdos.csail.mit.edu/6.824/papers/raft-extended.pdf</a>
</li>
<li>Diagram of Raft interactions： <a href="https://pdos.csail.mit.edu/6.824/notes/raft_diagram.pdf" target="_blank" rel="noopener">https://pdos.csail.mit.edu/6.824/notes/raft_diagram.pdf</a>
</li>
<li>Students guid to Raft: <a href="https://thesquareplanet.com/blog/students-guide-to-raft/" target="_blank" rel="noopener">https://thesquareplanet.com/blog/students-guide-to-raft/</a>
</li>
<li>Raft locking: <a href="https://pdos.csail.mit.edu/6.824/labs/raft-locking.txt" target="_blank" rel="noopener">https://pdos.csail.mit.edu/6.824/labs/raft-locking.txt</a>
</li>
<li>Raft structure: <a href="https://pdos.csail.mit.edu/6.824/labs/raft-structure.txt" target="_blank" rel="noopener">https://pdos.csail.mit.edu/6.824/labs/raft-structure.txt</a>
</li>
<li>Paxos Replicated State Machines as the Basis of a High-Performance Data Store <a href="https://static.usenix.org/event/nsdi11/tech/full_papers/Bolosky.pdf" target="_blank" rel="noopener">https://static.usenix.org/event/nsdi11/tech/full_papers/Bolosky.pdf</a>
</li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>MapReduce 框架实现思路</title>
      <link>https://fzdwx.github.io/posts/2022-09-27-mit6.824-lab1/</link>
      <pubDate>Tue, 27 Sep 2022 21:45:29 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-09-27-mit6.824-lab1/</guid>
      <description>about mit6.824 lab1(Map reduce framework)</description>
      <content:encoded><![CDATA[<p>看的时候很懵，写的时候更懵，我以为是要写几个<code>MapReduce</code>的程序，在把官方的<code>A few rules</code>以及<code>Hints</code>(
翻译可以看<a href="https://www.nowcoder.com/discuss/962675" target="_blank" rel="noopener">这里</a>
) 仔细的阅读了几遍后才发现是要写一个
MapReduce 的调度框架。。。</p>
<p>解题思路可以分为 3 步。</p>
<ol>
<li><code>worker</code>与<code>master</code>先通过<code>rpc</code>进行通信，即<code>worker</code>发送请求，<code>master</code>能够正确的应答且<code>worker</code>
能够收到。这一部分其实示例代码已经给到了，可以模仿着写一个从<code>master</code>获取需要执行的任务名称的<code>rpc request</code>。</li>
<li>上面一步完成后就可以进行真正的<code>Map task</code>请求以及执行了:
<ul>
<li><code>Map task</code>何时生成？</li>
<li>每个<code>worker</code>只向<code>master</code>请求一次就好了吗？</li>
<li><code>Map task</code>执行 超时/失败 需要有重试机制吗？</li>
<li>如何保证<code>Map task</code>消费时的线程安全？</li>
</ul>
</li>
<li>当所有的<code>Map task</code>执行完毕后就需要执行<code>Reduce task</code>了，如果你写完了第 2 步，那么<code>Reduce task</code>其实就是水到渠成了。
<ul>
<li>生成<code>Reduce task</code>，这里的每个<code>Reduce task</code>需要加载的文件按什么分成一组？</li>
<li>剩下的与<code>Map task</code>处理方法相同。</li>
</ul>
</li>
</ol>
<hr>
<p>我就是卡在了<code>Reduce task</code>创建时文件分组这个地方了，我直接把同一个<code>Map task</code>生成的文件当成一组了&hellip;但是显然不是这样。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
