<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>linux on fzdwx</title>
    <link>https://fzdwx.github.io/tags/linux/</link>
    <description>Recent content in linux on fzdwx</description>
    <image>
      <url>https://fzdwx.github.io/images/party_parrot.gif</url>
      <link>https://fzdwx.github.io/images/party_parrot.gif</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright [fzdwx](https://github.com/fzdwx)   since 2022</copyright>
    <lastBuildDate>Sun, 05 Mar 2023 22:27:31 +0800</lastBuildDate><atom:link href="https://fzdwx.github.io/tags/linux/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>记录学习 jyyos 操作系统课</title>
      <link>https://fzdwx.github.io/posts/2023-03-05-jyyos_c_compile/</link>
      <pubDate>Sun, 05 Mar 2023 22:27:31 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2023-03-05-jyyos_c_compile/</guid>
      <description>最近也是又追起了南京大学的操作系统课(前面几次都中途放弃了),记录一下
1. 首先就是编译第三节课的一个demo时,找不到 ld 等命令 &amp;nbsp;http://jyywiki.cn/OS/2023/build/lect3.ipynb demo(&amp;lsquo;hello-os&amp;rsquo;, &amp;lsquo;i/hello-os&amp;rsquo;)
由于我使用的是 archlinux, binutils 编译出来的 ld, gcc 等命令都是不带 x86 的前缀的, 而 Makefile 中定义的都是带 x86 的, 所以需要建立一个链接:
ln -s /usr/bin/ld /usr/bin/x86_64-linux-gnu-ld 来自 chatgpt 的解释: 该命令创建了一个名为“x86_64-linux-gnu-ld”的符号链接,指向“/usr/bin/ld”.这个符号链接可以被用作“x86_64-linux-gnu-ld”二进制文件的替代品. 符号链接是一种特殊的文件类型,它是一个指向另一个文件的文件,可以用来在文件系统中创建指向其他文件或目录的别名.
在Linux系统中,“/usr/bin/ld”是一个连接器（linker）,用于将多个目标文件合并为单个可执行文件.通过创建“x86_64-linux-gnu-ld”的符号链接,可以使该链接器的功能可以在不同的系统上使用,并且不需要更改可执行文件的代码. 这个符号链接通常被用于交叉编译（cross-compiling）应用程序,这种情况下,应用程序在不同的硬件平台上运行.
2. 使用 vscode 等编辑器时,第一个问题的代码中头文件无法跳转 使用 bear 生成 compile_commands.json, 然后编辑器就会自动识别了
bear -- make 来自 chatgpt 的解释: 该命令使用Bear和Make工具,用于自动捕获Makefile的编译命令和编译期间的调用链.
具体来说,Bear是一个工具,它可以将系统调用跟踪器（strace）输出转换为JSON格式的文件,这个文件包含了所有运行期间的系统调用. Make是一个工具,它用于根据Makefile规则自动构建和编译程序.
当这两个工具一起使用时,可以使用“bear &amp;ndash; make”命令自动捕获Makefile的编译命令和编译期间的调用链,这个过程可以在后续的调试中使用. 该命令的执行将产生一个JSON格式的文件,其中包含编译期间的所有系统调用和它们的参数.这个文件可以用于调试,性能优化,以及自动化编译和构建系统的开发.
总之,“bear &amp;ndash; make”命令可以帮助程序员更好地理解他们的代码在编译期间所做的事情,以及识别代码中的潜在问题.
3. 写一个 pstree - M1 &amp;nbsp;http://jyywiki.cn/OS/2023/labs/M1 实现思路:
扫描 /proc/ 目录下所有为数字的文件夹 读取 /proc/{pid}/status 文件 读取 name 以及 ppid 建树并打印树结构 4.</description>
      <content:encoded><![CDATA[<blockquote>
<p>最近也是又追起了南京大学的操作系统课(前面几次都中途放弃了),记录一下</p>
</blockquote>
<h3 id="1-首先就是编译第三节课的一个demo时找不到-ld-等命令">1. 首先就是编译第三节课的一个demo时,找不到 ld 等命令</h3>
<blockquote>
<p>&nbsp;<a href="http://jyywiki.cn/OS/2023/build/lect3.ipynb" target="_blank" rel="noopener">http://jyywiki.cn/OS/2023/build/lect3.ipynb</a>
 demo(&lsquo;hello-os&rsquo;, &lsquo;i/hello-os&rsquo;)</p>
</blockquote>
<p>由于我使用的是 archlinux, <code>binutils</code> 编译出来的 ld, gcc 等命令都是不带 x86 的前缀的,
而 Makefile 中定义的都是带 x86 的, 所以需要建立一个链接:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ln -s /usr/bin/ld /usr/bin/x86_64-linux-gnu-ld
</span></span></code></pre></div>




<div class="tip custom-block">
    <p class="custom-block-title">
        
        
        来自 chatgpt 的解释:
        
    </p>
    <p> <p>该命令创建了一个名为“x86_64-linux-gnu-ld”的符号链接,指向“/usr/bin/ld”.这个符号链接可以被用作“x86_64-linux-gnu-ld”二进制文件的替代品.
符号链接是一种特殊的文件类型,它是一个指向另一个文件的文件,可以用来在文件系统中创建指向其他文件或目录的别名.</p>
<p>在Linux系统中,“/usr/bin/ld”是一个连接器（linker）,用于将多个目标文件合并为单个可执行文件.通过创建“x86_64-linux-gnu-ld”的符号链接,可以使该链接器的功能可以在不同的系统上使用,并且不需要更改可执行文件的代码.
这个符号链接通常被用于交叉编译（cross-compiling）应用程序,这种情况下,应用程序在不同的硬件平台上运行.</p>
 </p>
</div>








<h3 id="2-使用-vscode-等编辑器时第一个问题的代码中头文件无法跳转">2. 使用 vscode 等编辑器时,第一个问题的代码中头文件无法跳转</h3>
<p>使用 bear 生成 compile_commands.json, 然后编辑器就会自动识别了</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bear -- make
</span></span></code></pre></div>




<div class="tip custom-block">
    <p class="custom-block-title">
        
        
        来自 chatgpt 的解释:
        
    </p>
    <p> <p>该命令使用Bear和Make工具,用于自动捕获Makefile的编译命令和编译期间的调用链.</p>
<p>具体来说,Bear是一个工具,它可以将系统调用跟踪器（strace）输出转换为JSON格式的文件,这个文件包含了所有运行期间的系统调用.
Make是一个工具,它用于根据Makefile规则自动构建和编译程序.</p>
<p>当这两个工具一起使用时,可以使用“bear &ndash; make”命令自动捕获Makefile的编译命令和编译期间的调用链,这个过程可以在后续的调试中使用.
该命令的执行将产生一个JSON格式的文件,其中包含编译期间的所有系统调用和它们的参数.这个文件可以用于调试,性能优化,以及自动化编译和构建系统的开发.</p>
<p>总之,“bear &ndash; make”命令可以帮助程序员更好地理解他们的代码在编译期间所做的事情,以及识别代码中的潜在问题.</p>
 </p>
</div>








<h3 id="3-写一个-pstree---m1">3. 写一个 pstree - M1</h3>
<blockquote>
<p>&nbsp;<a href="http://jyywiki.cn/OS/2023/labs/M1" target="_blank" rel="noopener">http://jyywiki.cn/OS/2023/labs/M1</a>
</p>
</blockquote>
<p>实现思路:</p>
<ol>
<li>扫描 <code>/proc/</code> 目录下所有为数字的文件夹</li>
<li>读取 <code>/proc/{pid}/status</code> 文件</li>
<li>读取 name 以及 ppid</li>
<li>建树并打印树结构</li>
</ol>
<h3 id="4-关于编译新的os-workbench"><del>4. 关于编译新的os-workbench</del></h3>
<p><del>今天尝试下载了一下 2023 年的代码仓库,没想到可以下了</del></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">~~git clone https://git.nju.edu.cn/jyy/os-workbench.git~~
</span></span></code></pre></div><p><del>然后我就拉了 L0 来跑,但是怎么样都跑不动: <code>[-Werror=array-bounds]</code> 是关于数组越界的</del>
<del>文件是 <code>os-workbench/abstract-machine/am/build/x86_64-qemu/src/x86/qemu/ioe.o:433</code></del></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">~~git pull origin L0~~
</span></span></code></pre></div><p><del>解决办法是在 <code>os-workbench/abstract-machine/Makefile</code> 的 <code>CFLAGS</code> 最后添加 <code>-Wno-array-bounds</code></del></p>
<h3 id="5-跑起来-2023-版的代码">5. 跑起来 2023 版的代码</h3>
<p>昨天晚上在我在本机的 L0 代码下 <code>make run</code> 是跑不起来的,qemu 正常启动了但是界面是黑的,环境是</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">Linux archlinux 6.2.2-arch1-1
</span></span><span class="line"><span class="cl">qemu 7.2
</span></span><span class="line"><span class="cl">gcc 12.2.1
</span></span></code></pre></div><p>最后只能曲线救国,在 docker 中 build, 然后在本机跑 qemu (docker 中不方便按图形化界面)</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-Dockerfile" data-lang="Dockerfile"><span class="line"><span class="cl"><span class="k">FROM</span><span class="s"> ubuntu:22.04</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">ENV</span> <span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive
</span></span><span class="line"><span class="cl"><span class="k">RUN</span> apt-get update<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> apt-get install -y build-essential git gcc-multilib qemu-system strace gdb sudo python3 libsdl2-dev libreadline-dev llvm-11 <span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">RUN</span> useradd -ms /bin/bash user<span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">USER</span><span class="s"> user</span><span class="err">
</span></span></span><span class="line"><span class="cl"><span class="err"></span><span class="k">WORKDIR</span><span class="s"> /home/users</span><span class="err">
</span></span></span></code></pre></div><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">docker build -t jyyos .
</span></span><span class="line"><span class="cl"><span class="c1"># os-workbench</span>
</span></span><span class="line"><span class="cl">docker run --rm -it -v <span class="si">${</span><span class="nv">PWD</span><span class="si">}</span>:/mnt -w /mnt jyyos bash
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># exit docker : os-workbench/kernel</span>
</span></span><span class="line"><span class="cl">make
</span></span><span class="line"><span class="cl">qemu-system-x86_64 -serial mon:stdio -machine <span class="nv">accel</span><span class="o">=</span>tcg -smp <span class="s2">&#34;&#34;</span> -drive <span class="nv">format</span><span class="o">=</span>raw,file<span class="o">=</span>./build/kernel-x86_64-qemu
</span></span></code></pre></div><p>可能还是编译出了问题, 使用 docker 编译后就没有出现第 4 个问题</p>
<p><figure id="a-/images/12333.png" class="align-center">
    <img src="/images/12333.png" alt="run kernel"  />
    
    <figcaption>
       run kernel
    </figcaption>
    
</figure></p>
<h3 id="6-在-abstractmachine-中显示一张图片---l0">6. 在 AbstractMachine 中显示一张图片 - L0</h3>
<p>这个我记得去年是做一个可以动的游戏,根据键盘的输入去做一些响应,而今年的是只要打印一张图片,大概思路:</p>
<ol>
<li><code>xxd -i xxx.png &gt; img_data.h</code></li>
<li>遍历这个数组,取 rgb 并调用 <code>draw_title</code></li>
<li>解析参数,获取要输出的分辨率,然后在获得宽高的缩放比,最后获得对于的像素点</li>
</ol>
<p><figure id="a-/images/1001.png" class="align-center">
    <img src="/images/1001.png" alt="1800x1200"  />
    
    <figcaption>
       1800x1200
    </figcaption>
    
</figure></p>
<p><figure id="a-/images/2023-03-16-21-45-20.png" class="align-center">
    <img src="/images/2023-03-16-21-45-20.png" alt="320x240"  />
    
    <figcaption>
       320x240
    </figcaption>
    
</figure></p>
<p>感觉我的实现有问题,只是放大了左上角</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>使用 tmux &#43; st</title>
      <link>https://fzdwx.github.io/posts/2023-02-12-tmux-st/</link>
      <pubDate>Sun, 12 Feb 2023 16:10:50 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2023-02-12-tmux-st/</guid>
      <description>&amp;nbsp;st 是一个非常的简单的终端软件,它对我的来说只少一个功能,就是多路服用(上下左右切分窗口),这在其他终端软件中都有提供,比如说 wezterm.
而 tmux 刚好可以提供这个功能:
tmux split-window # 向下切分 tmux split-window -h # 向右切分 然后就可以在 st 中设置快捷键: Details /* 切分 */ static char *sp[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux split-window&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; static char *sph[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux split-window -h&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; /* 切换窗口 */ static char *gd[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux select-pane -D&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; static char *gu[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux select-pane -U&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; static char *gr[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux select-pane -R&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; static char *gl[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux select-pane -L&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; /* 调整窗口大小 */ static char *rd[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux resize-pane -D 2&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; static char *ru[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux resize-pane -U 2&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; static char *rr[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux resize-pane -R 2&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; static char *rl[] = { &amp;#34;/bin/sh&amp;#34;, &amp;#34;-c&amp;#34;, &amp;#34;tmux resize-pane -L 2&amp;#34;,&amp;#34;externalpipe&amp;#34;, NULL }; static Shortcut shortcuts[] = { { ControlMask, XK_minus, externalpipe, {.</description>
      <content:encoded><![CDATA[<p>&nbsp;<a href="https://st.suckless.org/" target="_blank" rel="noopener">st</a>
 是一个非常的简单的终端软件,它对我的来说只少一个功能,就是多路服用(上下左右切分窗口),这在其他终端软件中都有提供,比如说 wezterm.</p>
<p>而 tmux 刚好可以提供这个功能:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">tmux split-window    <span class="c1"># 向下切分</span>
</span></span><span class="line"><span class="cl">tmux split-window -h <span class="c1"># 向右切分</span>
</span></span></code></pre></div><p>然后就可以在 st 中设置快捷键:



<details class="details custom-block">
    <summary>
        <span> 
        
            Details
        
        </span>
    </summary>
    <p>
        <div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cm">/* 切分 */</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sp</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux split-window&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">sph</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux split-window -h&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 切换窗口 */</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">gd</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux select-pane -D&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">gu</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux select-pane -U&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">gr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux select-pane -R&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">gl</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux select-pane -L&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="cm">/* 调整窗口大小 */</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">rd</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux resize-pane -D 2&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">ru</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux resize-pane -U 2&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">rr</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux resize-pane -R 2&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">rl</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span> <span class="s">&#34;/bin/sh&#34;</span><span class="p">,</span> <span class="s">&#34;-c&#34;</span><span class="p">,</span> <span class="s">&#34;tmux resize-pane -L 2&#34;</span><span class="p">,</span><span class="s">&#34;externalpipe&#34;</span><span class="p">,</span> <span class="nb">NULL</span> <span class="p">};</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">static</span> <span class="n">Shortcut</span> <span class="n">shortcuts</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">ControlMask</span><span class="p">,</span> <span class="n">XK_minus</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">sp</span> <span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">ControlMask</span><span class="p">,</span> <span class="n">XK_backslash</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">sph</span> <span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">MODKEY</span><span class="p">,</span> <span class="n">XK_Up</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">gu</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">MODKEY</span><span class="p">,</span> <span class="n">XK_Down</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">gd</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">MODKEY</span><span class="p">,</span> <span class="n">XK_Left</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">gl</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">MODKEY</span><span class="p">,</span> <span class="n">XK_Right</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">gr</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">ControlMask</span><span class="p">,</span> <span class="n">XK_Up</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">ru</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">ControlMask</span><span class="p">,</span> <span class="n">XK_Down</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">rd</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">ControlMask</span><span class="p">,</span> <span class="n">XK_Left</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">rl</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span> <span class="n">ControlMask</span><span class="p">,</span> <span class="n">XK_Right</span><span class="p">,</span> <span class="n">externalpipe</span><span class="p">,</span> <span class="p">{.</span><span class="n">v</span> <span class="o">=</span> <span class="n">rr</span><span class="p">}</span> <span class="p">},</span>
</span></span><span class="line"><span class="cl"><span class="p">};</span>
</span></span></code></pre></div>
    </p>
</details>









</p>
<p>最后关闭 tmux 的 status line, 因为我只需要它的 pane 功能,其他的都太碍眼了.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="n">set</span> <span class="o">-</span><span class="n">g</span> <span class="n">status</span> <span class="n">off</span>
</span></span></code></pre></div><p><figure id="a-https://user-images.githubusercontent.com/65269574/218301130-4e361459-e366-4793-b94f-a8b4b07a47e4.gif" class="align-center">
    <img src="https://user-images.githubusercontent.com/65269574/218301130-4e361459-e366-4793-b94f-a8b4b07a47e4.gif" alt="preview"  />
    
    <figcaption>
       preview
    </figcaption>
    
</figure></p>
<hr>
<p>我的分支: &nbsp;<a href="https://github.com/fzdwx/st" target="_blank" rel="noopener">https://github.com/fzdwx/st</a>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>linux 连接蓝牙耳机</title>
      <link>https://fzdwx.github.io/posts/2023-02-09-bluetooth/</link>
      <pubDate>Thu, 09 Feb 2023 12:50:21 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2023-02-09-bluetooth/</guid>
      <description>以 Archlinux 为例子
bluetoothctl power on # 扫描 bluetoothctl scan on # 结对 bluetoothctl pair xxx # 连接 bluetoothctl connect xxx # 设置 蓝牙为默认输出 pavucontrol 设置 蓝牙为默认输出 </description>
      <content:encoded><![CDATA[<p>以 Archlinux 为例子</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">bluetoothctl power on
</span></span><span class="line"><span class="cl"><span class="c1"># 扫描</span>
</span></span><span class="line"><span class="cl">bluetoothctl scan on  
</span></span><span class="line"><span class="cl"><span class="c1"># 结对</span>
</span></span><span class="line"><span class="cl">bluetoothctl pair xxx
</span></span><span class="line"><span class="cl"><span class="c1"># 连接</span>
</span></span><span class="line"><span class="cl">bluetoothctl connect xxx
</span></span><span class="line"><span class="cl"><span class="c1"># 设置 蓝牙为默认输出</span>
</span></span><span class="line"><span class="cl">pavucontrol
</span></span></code></pre></div><p><figure id="a-/images/Pasted%20image%2020230209125317.png" class="align-center">
    <img src="/images/Pasted%20image%2020230209125317.png" alt="设置 蓝牙为默认输出"  />
    
    <figcaption>
       设置 蓝牙为默认输出
    </figcaption>
    
</figure></p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Wayland下的窗口管理器： Hyprland</title>
      <link>https://fzdwx.github.io/posts/2023-01-26-hyprland/</link>
      <pubDate>Thu, 26 Jan 2023 11:04:48 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2023-01-26-hyprland/</guid>
      <description>今天简单尝试了一下 &amp;nbsp;Hyprland ,它的功能类似于 &amp;nbsp;DWM + picom 的组合.只是粗略的尝试了一下,发现还是有一些问题:
分屏的时候,扩展屏幕的光标不显示 设置 WLR_NO_HARDWARE_CURSORS=1 即可解决 扩展屏幕不时有一些黑块闪烁 替换安装包为 hyprland-nvidia-git 即可解决 waybar 有一点用的不爽,它的 workspaces 不是每个屏幕都是独立的(DWM 中的 tag 功能) 当然它还是有一些好处的:
不打任何补丁就有很好的可用性 自带了一些动画效果 配置文件热加载(即每次修改就会立即生效) 这一点好评,DWM 是每次修改了配置都要重新 make 但是我还是选择继续使用 DWM,因为它没有什么必须切换的理由,而且有一些我常用的功能在 Hyprland 中没有找到替代的,加上我的 DWM 的配置也趋于稳定了,也新增了可以点击的 status bar（Hyprland 下使用waybar 可以做到这个功能）.
相关代码 安装脚本:
# 安装 hyperland yay -S hyprland-nvidia-git # 安装 waybar yay -S waybar-hyprland-git # 安装 hyprland share yay -S xdg-desktop-portal-hyprland-git # 安装 rofi for wayland yay -S rofi-lbonn-wayland-git # 安装 壁纸切换 git clone https://github.</description>
      <content:encoded><![CDATA[<p>今天简单尝试了一下 &nbsp;<a href="https://hyprland.org/" target="_blank" rel="noopener">Hyprland</a>
,它的功能类似于 &nbsp;<a href="/posts/2022-09-29-dwm">DWM</a>
 + picom 的组合.只是粗略的尝试了一下,发现还是有一些问题:</p>
<ol>
<li>分屏的时候,扩展屏幕的光标不显示
<ul>
<li>设置 <code>WLR_NO_HARDWARE_CURSORS=1</code>  即可解决</li>
</ul>
</li>
<li>扩展屏幕不时有一些黑块闪烁
<ul>
<li>替换安装包为 <code>hyprland-nvidia-git</code>  即可解决</li>
</ul>
</li>
<li>waybar 有一点用的不爽,它的 workspaces 不是每个屏幕都是独立的(DWM 中的 tag 功能)</li>
</ol>
<p>当然它还是有一些好处的:</p>
<ol>
<li>不打任何补丁就有很好的可用性</li>
<li>自带了一些动画效果</li>
<li>配置文件热加载(即每次修改就会立即生效)
<ul>
<li>这一点好评,DWM 是每次修改了配置都要重新 <code>make</code></li>
</ul>
</li>
</ol>
<p>但是我还是选择继续使用 DWM,因为它没有什么必须切换的理由,而且有一些我常用的功能在 Hyprland 中没有找到替代的,加上我的 DWM 的配置也趋于稳定了,也新增了可以点击的 status bar（Hyprland 下使用waybar 可以做到这个功能）.</p>



<details class="details custom-block">
    <summary>
        <span> 
        
            相关代码
        
        </span>
    </summary>
    <p>
        <p>安装脚本:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 安装 hyperland</span>
</span></span><span class="line"><span class="cl">yay -S hyprland-nvidia-git
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 waybar</span>
</span></span><span class="line"><span class="cl">yay -S waybar-hyprland-git
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 hyprland share</span>
</span></span><span class="line"><span class="cl">yay -S xdg-desktop-portal-hyprland-git
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 rofi for wayland</span>
</span></span><span class="line"><span class="cl">yay -S rofi-lbonn-wayland-git
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 安装 壁纸切换</span>
</span></span><span class="line"><span class="cl">git clone https://github.com/Horus645xx/swww
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> swww
</span></span><span class="line"><span class="cl">cargo build --release
</span></span><span class="line"><span class="cl">cp /target/release/swww /usr/bin
</span></span><span class="line"><span class="cl">cp /target/release/swww-daemon /usr/bin
</span></span><span class="line"><span class="cl">swww init 
</span></span><span class="line"><span class="cl">swww img --transition-type left  ~/Pictures/bg/0494e945880511ebb6edd017c2d2eca2.png
</span></span></code></pre></div><p>供参考的启动脚本:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">LIBVA_DRIVER_NAME</span><span class="o">=</span>nvidia
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">XDG_SESSION_TYPE</span><span class="o">=</span>wayland
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GBM_BACKEND</span><span class="o">=</span>nvidia-drm
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">__GLX_VENDOR_LIBRARY_NAME</span><span class="o">=</span>nvidia
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">WLR_NO_HARDWARE_CURSORS</span><span class="o">=</span><span class="m">1</span> <span class="c1"># fix cursor</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># Example IME Support: fcitx5</span>
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GTK_IM_MODULE</span><span class="o">=</span>fcitx5
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">QT_IM_MODULE</span><span class="o">=</span>fcitx5
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">XMODIFIERS</span><span class="o">=</span>@im<span class="o">=</span>fcitx5
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">SDL_IM_MODULE</span><span class="o">=</span>fcitx5
</span></span><span class="line"><span class="cl"><span class="nb">export</span> <span class="nv">GLFW_IM_MODULE</span><span class="o">=</span>ibus
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">exec</span> Hyprland
</span></span></code></pre></div><p>~/.config/hypr/hyprland.conf:</p>
<pre tabindex="0"><code class="language-conf" data-lang="conf">########################################################################################
AUTOGENERATED HYPR CONFIG.
PLEASE USE THE CONFIG PROVIDED IN THE GIT REPO /examples/hypr.conf AND EDIT IT,
OR EDIT THIS ONE ACCORDING TO THE WIKI INSTRUCTIONS.
########################################################################################

#
# Please note not all available settings / options are set here.
# For a full list, see the wiki
#

# See https://wiki.hyprland.org/Configuring/Monitors/
monitor=,preferred,auto,auto
#monitor=eDP-1-1, 1920x1080@144, 1920x0, 1
#monitor=HDMI-0, 1920x1080@60, 0x0, 1

# See https://wiki.hyprland.org/Configuring/Keywords/ for more

# Execute your favorite apps at launch
# exec-once = waybar &amp; hyprpaper &amp; firefox

exec-once = fcitx5
exec-once = flameshot
exec-once = /opt/clash/cfw
exec-once = waybar
#exec-once = dunst

# Source a file (multi-file configs)
# source = ~/.config/hypr/myColors.conf

#misc {
#    no_vfr = 1
#}
# For all categories, see https://wiki.hyprland.org/Configuring/Variables/
input {
    kb_layout = us
    kb_variant =
    kb_model =
    kb_options =
    kb_rules =

    follow_mouse = 1

    touchpad {
        natural_scroll = no
    }

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.
}

general {
    # See https://wiki.hyprland.org/Configuring/Variables/ for more

    gaps_in = 5
    gaps_out = 20
    border_size = 2
    col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
    col.inactive_border = rgba(595959aa)

    layout = dwindle
}

decoration {
    # See https://wiki.hyprland.org/Configuring/Variables/ for more

    rounding = 10
    blur = yes
    blur_size = 3
    blur_passes = 1
    blur_new_optimizations = on

    drop_shadow = yes
    shadow_range = 4
    shadow_render_power = 3
    col.shadow = rgba(1a1a1aee)
}

animations {
    enabled = yes

    # Some default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

    bezier = myBezier, 0.05, 0.9, 0.1, 1.05

    animation = windows, 1, 7, myBezier
    animation = windowsOut, 1, 7, default, popin 80%
    animation = border, 1, 10, default
    animation = fade, 1, 7, default
    animation = workspaces, 1, 6, default
}

dwindle {
    # See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
    pseudotile = yes # master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
    preserve_split = yes # you probably want this
}

master {
    # See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
    new_is_master = true
}

gestures {
    # See https://wiki.hyprland.org/Configuring/Variables/ for more
    workspace_swipe = off
}

# Example per-device config
# See https://wiki.hyprland.org/Configuring/Keywords/#executing for more
device:epic mouse V1 {
    sensitivity = -0.5
}

# Example windowrule v1
# windowrule = float, ^(kitty)$
# Example windowrule v2
# windowrulev2 = float,class:^(kitty)$,title:^(kitty)$
# See https://wiki.hyprland.org/Configuring/Window-Rules/ for more
#
# 定义 class 带 float 的都初始为 float 启动
windowrulev2 = float,class:^(float)$
windowrulev2 = noborder,class:^(noborder)$

# See https://wiki.hyprland.org/Configuring/Keywords/ for more
$mainMod = SUPER
$term = wezterm
$term_float = wezterm start --class float
$rofi = rofi -show window -show-icons

# start term
bind = $mainMod,       Return,       exec, $term
# start float term
bind = $mainMod,   minus,        exec, $term_float
# start launch
bind = ALT,        SPACE,        exec, $rofi

# kill window
bind = $mainMod, Q, killactive,
bind = $mainMod, P, pseudo, # dwindle
bind = $mainMod, J, togglesplit, # dwindle
# super + f 全屏窗口
bind=$mainMod,F,fullscreen,0
# super + space 将窗口切换为浮动
bind=$mainMod,SPACE,togglefloating,active


# 切换聚焦窗口
bind=SUPER,left,movefocus,l
bind=SUPER,right,movefocus,r
bind=SUPER,up,movefocus,u
bind=SUPER,down,movefocus,d

# 将当前窗口移动 可以一直移动
bind=SUPERSHIFT,left,movewindow,l
bind=SUPERSHIFT,right,movewindow,r
bind=SUPERSHIFT,up,movewindow,u
bind=SUPERSHIFT,down,movewindow,d

# 切换工作空间
bind=SUPER,TAB,workspace,previous
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10


# alt+super + 方向键 控制窗口大小
bind=$mainMod,comma,resizeactive,-20 0
bind=$mainMod,period,resizeactive,20 0
bind=ALT_SUPER,up,resizeactive,0 -20
bind=ALT_SUPER,down,resizeactive,0 20

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10


# shift + super + left/right 移动窗口 到下一个或上一个工作区
bind = $mainMod SHIFT,Left,movetoworkspace,e-1
bind = $mainMod SHIFT,right,movetoworkspace,e+1

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
</code></pre>
    </p>
</details>










]]></content:encoded>
    </item>
    
    <item>
      <title>在shell脚本中执行cd后改变main shell的路径</title>
      <link>https://fzdwx.github.io/posts/2022-10-11-about-source/</link>
      <pubDate>Tue, 11 Oct 2022 16:55:35 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-10-11-about-source/</guid>
      <description>起因 昨天晚上想用fzf与cd联动,就是fzf的结果传递给cd来执行于是有了这么一条命令:
cd $(fd --type d | fzf) 这个命令也确实能完成任务,但是问题有两个:
如果直接退出的话会回到家目录,因为$(..)的执行结果为空 每次都要输入这么多会很麻烦 用alias 然后尝试用alias来试试,所以就往.zshrc里面添加:
alias cdf=&amp;#34;cd $(fd --type d | fzf)&amp;#34; 结果是直接不能运行,因为它直接识别了$(..)这一段,然后直接运行了,但是后面就不会运行.
用shell脚本 然后就写了这个文件:
#!/bin/sh path=$(fd --type d --strip-cwd-prefix --hidden --follow --exclude .git --exclude node_modules | fzf) if [ -z &amp;#34;$path&amp;#34; ]; then exit fi cd &amp;#34;$path&amp;#34; || exit 结果也是不行,后面我在最下面加了一行echo &amp;quot;$PWD&amp;quot;,我看到是执行了的,但是程序退出了就失效了.
解决 最后我搜索到可以使用source xxx或者. xxx来解决,最后是alias+shell脚本来完成这个操作的:
alias cdf=&amp;#34;source /path/to/cdf&amp;#34; 同时它也解决我上面提到的两个问题.
source为什么能解决？ 之所以直接用shell脚本直接运行会不行,是因为它不是在当前shell环境中运行的,而是一个子shell,所以结果就不能改变当前的文件目录了.
而source或者.就代表着在当前的shell环境中执行,所以就能成功.
更新 2022/11/18 今天发现一种更容易解决的办法,就是在写一个 shell 方法:
function cd() { cd &amp;#34;$(fzf)&amp;#34; } 把它加入到.</description>
      <content:encoded><![CDATA[<h2 id="起因">起因</h2>
<p>昨天晚上想用fzf与cd联动,就是fzf的结果传递给cd来执行于是有了这么一条命令:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">cd</span> <span class="k">$(</span>fd --type d <span class="p">|</span> fzf<span class="k">)</span>
</span></span></code></pre></div><p>这个命令也确实能完成任务,但是问题有两个:</p>
<ol>
<li>如果直接退出的话会回到家目录,因为<code>$(..)</code>的执行结果为空</li>
<li>每次都要输入这么多会很麻烦</li>
</ol>
<h2 id="用alias">用alias</h2>
<p>然后尝试用alias来试试,所以就往<code>.zshrc</code>里面添加:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">cdf</span><span class="o">=</span><span class="s2">&#34;cd </span><span class="k">$(</span>fd --type d <span class="p">|</span> fzf<span class="k">)</span><span class="s2">&#34;</span>
</span></span></code></pre></div><p>结果是直接不能运行,因为它直接识别了<code>$(..)</code>这一段,然后直接运行了,但是后面就不会运行.</p>
<h2 id="用shell脚本">用shell脚本</h2>
<p>然后就写了这个文件:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="cp">#!/bin/sh
</span></span></span><span class="line"><span class="cl"><span class="cp"></span><span class="nv">path</span><span class="o">=</span><span class="k">$(</span>fd --type d --strip-cwd-prefix --hidden --follow --exclude .git --exclude node_modules <span class="p">|</span> fzf<span class="k">)</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&#34;</span><span class="nv">$path</span><span class="s2">&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span></span><span class="line"><span class="cl">    <span class="nb">exit</span>
</span></span><span class="line"><span class="cl"><span class="k">fi</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> <span class="s2">&#34;</span><span class="nv">$path</span><span class="s2">&#34;</span> <span class="o">||</span> <span class="nb">exit</span>
</span></span></code></pre></div><p>结果也是不行,后面我在最下面加了一行<code>echo &quot;$PWD&quot;</code>,我看到是执行了的,但是程序退出了就失效了.</p>
<h2 id="解决">解决</h2>
<p>最后我搜索到可以使用<code>source xxx</code>或者<code>. xxx</code>来解决,最后是alias+shell脚本来完成这个操作的:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">cdf</span><span class="o">=</span><span class="s2">&#34;source /path/to/cdf&#34;</span>
</span></span></code></pre></div><p>同时它也解决我上面提到的两个问题.</p>
<h2 id="source为什么能解决">source为什么能解决？</h2>
<p>之所以直接用shell脚本直接运行会不行,是因为它不是在当前shell环境中运行的,而是一个子shell,所以结果就不能改变当前的文件目录了.</p>
<p>而<code>source</code>或者<code>.</code>就代表着在当前的shell环境中执行,所以就能成功.</p>
<h2 id="更新">更新</h2>
<h3 id="20221118">2022/11/18</h3>
<p>今天发现一种更容易解决的办法,就是在写一个 shell 方法:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="k">function</span> cd<span class="o">()</span> <span class="o">{</span>
</span></span><span class="line"><span class="cl">    <span class="nb">cd</span> <span class="s2">&#34;</span><span class="k">$(</span>fzf<span class="k">)</span><span class="s2">&#34;</span>
</span></span><span class="line"><span class="cl"><span class="o">}</span>
</span></span></code></pre></div><p>把它加入到<code>.zshrc</code>(我用的是 zsh)中,然后在命令行中输入 <code>cd</code> 就好了.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>在Abstract Machine上玩超级马里奥</title>
      <link>https://fzdwx.github.io/posts/2022-10-09-mario-nes/</link>
      <pubDate>Sun, 09 Oct 2022 19:40:42 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-10-09-mario-nes/</guid>
      <description>最近在学习 jyy 的&amp;nbsp;计算机系统基础习题课 , 在做&amp;nbsp;pa1 的时候提 到一个运行红白机游戏的&amp;nbsp;项目 遇到的坑:
1.SIGSTKSZ 参数找不到
SIGSTKSZ参数找不到 将SIGSTKSZ修改为一个固定的参数
//uint8_t sigstack[SIGSTKSZ]; uint8_t sigstack[8192]; 2.serial 不正确
serial不正确 修改nemu/src/device/serial.c#init_serial,每个人的不同,我的是 9.</description>
      <content:encoded><![CDATA[<p>最近在学习 jyy 的&nbsp;<a href="http://jyywiki.cn/ICS/2021/" target="_blank" rel="noopener">计算机系统基础习题课 </a>
,
在做&nbsp;<a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2021/1.1.html#nemu%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener">pa1</a>
的时候提
到一个运行红白机游戏的&nbsp;<a href="https://github.com/NJU-ProjectN/fceux-am" target="_blank" rel="noopener">项目</a>
</p>
<p>遇到的坑:</p>
<p>1.<code>SIGSTKSZ</code> 参数找不到</p>
<p><figure id="a-/images/5.png" class="align-center">
    <img src="/images/5.png" alt="SIGSTKSZ参数找不到"  />
    
    <figcaption>
       SIGSTKSZ参数找不到
    </figcaption>
    
</figure></p>
<p>将<code>SIGSTKSZ</code>修改为一个固定的参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//uint8_t sigstack[SIGSTKSZ];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">uint8_t</span> <span class="n">sigstack</span><span class="p">[</span><span class="mi">8192</span><span class="p">];</span>
</span></span></code></pre></div><p>2.serial 不正确</p>
<p><figure id="a-/images/6.png" class="align-center">
    <img src="/images/6.png" alt="serial不正确"  />
    
    <figcaption>
       serial不正确
    </figcaption>
    
</figure></p>
<p>修改<code>nemu/src/device/serial.c#init_serial</code>,每个人的不同,我的是 9.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>调节linux屏幕的亮度</title>
      <link>https://fzdwx.github.io/posts/2022-10-04-backlight/</link>
      <pubDate>Tue, 04 Oct 2022 10:07:28 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-10-04-backlight/</guid>
      <description>由于使用DWM,它不能像KDE那样之间有图形化的亮度调节功能,所以记录一下.</description>
      <content:encoded><![CDATA[<p><strong>查看当前backlight由什么控制:</strong></p>
<blockquote>
<p>一般都是<code>intel</code>.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">ls /sys/class/backlight
</span></span></code></pre></div><p><strong>查看当前的亮度:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">cat /sys/class/backlight/intel_backlight/max_brightness
</span></span></code></pre></div><p><strong>修改亮度:</strong></p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">echo</span> <span class="m">5000</span> <span class="p">|</span> sudo tee /sys/class/backlight/intel_backlight/brightness
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
    <item>
      <title>Dwm初体验</title>
      <link>https://fzdwx.github.io/posts/2022-09-29-dwm/</link>
      <pubDate>Thu, 29 Sep 2022 23:42:41 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-09-29-dwm/</guid>
      <description>安装 git clone https://git.suckless.org/dwm cd dwm sudo make clean install 启动 如果已经有了sddm,可以使用sudo systemctl disable sddm.service 来进行关闭,如果到时候不想用了可以用sudo systemctl enable sddm.service来开启sddm.
# 准备配置文件 cp /etc/X11/xinit/xinitrc ~/.xinitrc vim ~/.xinitrc # 添加 exec dwm # 注释 #twm &amp;amp; #xclock -geometry 50x50-1+1 &amp;amp; #xterm -geometry 80x50+494+51 &amp;amp; #xterm -geometry 80x20+494-0 &amp;amp; #exec xterm -geometry 80x66+0+0 -name login 然后重启并调用startx即可.
遇到的问题 直接断网 使用NetworkManager进行连接,可能要用到dhcpcd.
nmcli device wifi list nmcli device wifi connect {{wifi name}} password {{pwd}} 可能会连接失败,你可以试试nmcli connection show 来查看是否存在以前的连接信息,可以用nmcli connection delete {{wifi name}}来删除对应的信息</description>
      <content:encoded><![CDATA[<h2 id="安装">安装</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">git clone https://git.suckless.org/dwm
</span></span><span class="line"><span class="cl"><span class="nb">cd</span> dwm
</span></span><span class="line"><span class="cl">sudo make clean install
</span></span></code></pre></div><h2 id="启动">启动</h2>
<p>如果已经有了sddm,可以使用<code>sudo systemctl disable sddm.service</code>
来进行关闭,如果到时候不想用了可以用<code>sudo systemctl enable sddm.service</code>来开启sddm.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 准备配置文件</span>
</span></span><span class="line"><span class="cl">cp /etc/X11/xinit/xinitrc ~/.xinitrc
</span></span><span class="line"><span class="cl">vim ~/.xinitrc
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 添加</span>
</span></span><span class="line"><span class="cl"><span class="nb">exec</span> dwm
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 注释</span>
</span></span><span class="line"><span class="cl"><span class="c1">#twm &amp;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#xclock -geometry 50x50-1+1 &amp;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#xterm -geometry 80x50+494+51 &amp;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#xterm -geometry 80x20+494-0 &amp;</span>
</span></span><span class="line"><span class="cl"><span class="c1">#exec xterm -geometry 80x66+0+0 -name login</span>
</span></span></code></pre></div><p>然后重启并调用<code>startx</code>即可.</p>
<h2 id="遇到的问题">遇到的问题</h2>
<h3 id="直接断网">直接断网</h3>
<p>使用NetworkManager进行连接,可能要用到<code>dhcpcd</code>.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">nmcli device wifi list
</span></span><span class="line"><span class="cl">nmcli device wifi connect <span class="o">{{</span>wifi name<span class="o">}}</span> password <span class="o">{{</span>pwd<span class="o">}}</span>
</span></span></code></pre></div><p>可能会连接失败,你可以试试<code>nmcli connection show</code>
来查看是否存在以前的连接信息,可以用<code>nmcli connection delete {{wifi name}}</code>来删除对应的信息</p>
<h3 id="输入法失效">输入法失效</h3>
<p>添加配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim ~/.pam_environment
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">INPUT_METHOD <span class="nv">DEFAULT</span><span class="o">=</span>fcitx5
</span></span><span class="line"><span class="cl">GTK_IM_MODULE <span class="nv">DEFAULT</span><span class="o">=</span>fcitx5
</span></span><span class="line"><span class="cl">QT_IM_MODULE <span class="nv">DEFAULT</span><span class="o">=</span>fcitx5
</span></span><span class="line"><span class="cl">XMODIFIERS <span class="nv">DEFAULT</span><span class="o">=</span>@im<span class="o">=</span>fcitx5
</span></span></code></pre></div><p>添加启动命令</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">vim ~/.xinitrc1
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="c1"># 在exec dwm之前添加</span>
</span></span><span class="line"><span class="cl"><span class="nb">exec</span> fcitx5 <span class="p">&amp;</span>
</span></span></code></pre></div><h3 id="扩展屏幕无效">扩展屏幕无效</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="c1"># 可以先查看有哪些屏幕</span>
</span></span><span class="line"><span class="cl">xrandr 
</span></span><span class="line"><span class="cl"><span class="c1">#</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 将下面的命令加入 ~/.xinitrc1 中,在exec dwm之前添加</span>
</span></span><span class="line"><span class="cl"><span class="c1"># 我有两个,是上下关系,所以用below 其他有 left 以及 right</span>
</span></span><span class="line"><span class="cl">xrandr --output eDP-1-1  --auto --below HDMI-0
</span></span></code></pre></div><h2 id="常用快捷键">常用快捷键</h2>
<p>可以参考我配置： &nbsp;<a href="https://github.com/fzdwx/dwm" target="_blank" rel="noopener">https://github.com/fzdwx/dwm</a>
</p>
<p><code>MOD</code> -&gt; <code>WIN</code></p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MOD+SHIFT+ENTER</code></td>
<td>新开终端</td>
</tr>
</tbody>
</table>
<h3 id="在本tag内切换聚焦窗口">在本tag内切换聚焦窗口</h3>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ALT + tab</code></td>
<td>切换聚焦窗口</td>
</tr>
<tr>
<td><code>MOD + up</code></td>
<td>切换聚焦窗口</td>
</tr>
<tr>
<td><code>MOD + down</code></td>
<td>切换聚焦窗口</td>
</tr>
</tbody>
</table>
<h3 id="跨tag操作">跨tag操作</h3>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MOD + left / right</code></td>
<td>切换tag</td>
</tr>
<tr>
<td><code>MOD + SHIGT + left / tight</code></td>
<td>将当前窗口移动到其他tag</td>
</tr>
<tr>
<td><code>MOD + a</code></td>
<td>第一次是显示所有tag,第二次是跳转到聚焦的窗口所在的窗口</td>
</tr>
</tbody>
</table>
<h3 id="窗口操作">窗口操作</h3>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MOD + q</code></td>
<td>退出窗口</td>
</tr>
<tr>
<td><code>MOD + h</code></td>
<td>隐藏窗口</td>
</tr>
<tr>
<td><code>MOD + SHIFT + h</code></td>
<td>显示窗口（像一个栈一样.）</td>
</tr>
<tr>
<td><code>MOD + ENTER</code></td>
<td>将当前窗口设置为主窗口</td>
</tr>
<tr>
<td><code>MOD + f</code></td>
<td>将当前窗口全屏</td>
</tr>
<tr>
<td><code>MOD + CTRL + 方向键</code></td>
<td>移动窗口</td>
</tr>
<tr>
<td><code>MOD + ALT + 方向键</code></td>
<td>调整窗口大小</td>
</tr>
<tr>
<td><code>MOD + o</code></td>
<td>只显示当前窗口/显示所有窗口</td>
</tr>
<tr>
<td><code>MOD + t</code></td>
<td>开启/关闭 聚焦目标的浮动模式</td>
</tr>
<tr>
<td><code>MOD + SHIFT + t</code></td>
<td>开启/关闭 全部目标的浮动模式</td>
</tr>
</tbody>
</table>
<p>| <code>MOD + SHIFT + f</code>  | 开启/关闭 状态栏 |</p>
<h3 id="切换屏幕">切换屏幕</h3>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>MOD + x</code></td>
<td>将鼠标移动到其他屏幕</td>
</tr>
<tr>
<td><code>MOD + SHIFT + X</code></td>
<td>将当前窗口移动到其他屏幕</td>
</tr>
</tbody>
</table>
<h2 id="更新">更新</h2>
<h3 id="click-status-bar">click status bar</h3>
<p>最近跟进了大佬的配置&nbsp;<a href="https://github.com/yaocccc/dwm" target="_blank" rel="noopener">yaocccc</a>
, 可点击的 status bar.</p>
<p>主要原理就是根据预定义的格式解析出<code>signal</code>
,然后调用预定义的脚本文件(&nbsp;<a href="https://github.com/fzdwx/dwm/commit/b30b5bedb1661e70acf6830f924857650831b441#diff-62eebf5eaf0e6a76a21dfed9da6556ee5413ddb49f06013bd83403cc1a485d98" target="_blank" rel="noopener">commit</a>
)</p>
<p>也很容易扩展,可以参考我的&nbsp;<a href="https://github.com/fzdwx/dwm/blob/main/statusbar/packages/fm.sh" target="_blank" rel="noopener">fm</a>
, <code>update</code>是构造要返回的内容,
<code>click</code>就是点击时调用的方法,<code>wezterm start --class float ranger</code>我这一段就是启动 wezterm 并调用 ranger.</p>
<p><figure id="a-/images/11.png" class="align-center">
    <img src="/images/11.png" alt="img.png"  />
    
    <figcaption>
       img.png
    </figcaption>
    
</figure></p>
<h2 id="links">Links</h2>
<ul>
<li>&nbsp;<a href="https://wiki.archlinux.org/title/Dwm_%28%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87%29" target="_blank" rel="noopener">ArchWiki Dwm</a>
</li>
<li>&nbsp;<a href="https://dwm.suckless.org/patches/" target="_blank" rel="noopener">Dwm patches</a>
</li>
<li>&nbsp;<a href="https://github.com/Katzeee/dwm-patches-chinese/blob/master/dwm-patches-chinese.md" target="_blank" rel="noopener">Dwm patches中文翻译</a>
</li>
<li>&nbsp;<a href="https://yaocc.cc/2022/06/19/linux%E4%B8%9D%E6%BB%91%E7%9A%84%E5%8A%A8%E7%94%BB%E4%BD%93%E9%AA%8C%E2%80%94%E2%80%94picom/" target="_blank" rel="noopener">picom美化</a>
</li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>一个linux中的应用程序 launcher: Rofi</title>
      <link>https://fzdwx.github.io/posts/2022-09-18-about-rofi/</link>
      <pubDate>Sun, 18 Sep 2022 22:15:39 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-09-18-about-rofi/</guid>
      <description>今天发现了一个 linux 下的 application launcher &amp;nbsp;rofi ,它可以快速切换窗口和启动程序, 我用它和wmctrl进行配合使用.
我的使用过程:
1.Archlinux install
yay -S rofi 2.添加自定义快捷键绑定 hotkey 为alt+space触发rofi -show.
3.pressalt+space,然后使用shift+leftorright进行切换 mode.
更改主题以及显示 icon:
1.生成配置文件
mkdir -p ~/.config/rofi rofi -dump-config &amp;gt; ~/.config/rofi/config.rasi 2.显示icon
sed -i &amp;#39;8c show-icons: true;&amp;#39; ~/.config/rofi/config.rasi 3.更换主题
参考 &amp;nbsp;https://github.com/lr-tech/rofi-themes-collection#installing-themes 我的wmctrl的配置示例:
使用xprop WM_CLASS获取前缀.
alias chrome=&amp;#34;wmctrl -x -a google-chrome || google-chrome-stable &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;#34; alias note=&amp;#34;wmctrl -x -a obsidian || /usr/bin/obsidian &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;#34; alias codew=&amp;#34;wmctrl -x -a code || /opt/code/code &amp;gt; /dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;#34; alias idea=&amp;#34;wmctrl -x -a jetbrains-idea || /opt/idea/bin/idea.</description>
      <content:encoded><![CDATA[<blockquote>
<p>今天发现了一个 linux 下的 application launcher &nbsp;<a href="https://github.com/davatorium/rofi" target="_blank" rel="noopener">rofi</a>
 ,它可以快速切换窗口和启动程序,
我用它和<code>wmctrl</code>进行配合使用.</p>
</blockquote>
<p><strong>我的使用过程:</strong></p>
<p>1.Archlinux install</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">yay -S rofi
</span></span></code></pre></div><p>2.添加自定义快捷键绑定 hotkey 为<code>alt</code>+<code>space</code>触发<code>rofi -show</code>.</p>
<p>3.press<code>alt</code>+<code>space</code>,然后使用<code>shift</code>+<code>left</code>or<code>right</code>进行切换 mode.</p>
<hr>
<p><strong>更改主题以及显示 icon</strong>:</p>
<p>1.生成配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir -p ~/.config/rofi
</span></span><span class="line"><span class="cl">rofi -dump-config &gt; ~/.config/rofi/config.rasi
</span></span></code></pre></div><p>2.显示icon</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sed -i <span class="s1">&#39;8c show-icons: true;&#39;</span> ~/.config/rofi/config.rasi
</span></span></code></pre></div><p>3.更换主题</p>
<p>参考 &nbsp;<a href="https://github.com/lr-tech/rofi-themes-collection#installing-themes" target="_blank" rel="noopener">https://github.com/lr-tech/rofi-themes-collection#installing-themes</a>
</p>
<hr>
<p><strong>我的<code>wmctrl</code>的配置示例</strong>:</p>
<blockquote>
<p>使用<code>xprop WM_CLASS</code>获取前缀.</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">chrome</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a google-chrome || google-chrome-stable &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">note</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a obsidian || /usr/bin/obsidian &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">codew</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a code || /opt/code/code &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">idea</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a jetbrains-idea || /opt/idea/bin/idea.sh &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">discord</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a discord || /opt/discord/Discord &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
