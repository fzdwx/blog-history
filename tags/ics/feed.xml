<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ics on fzdwx</title>
    <link>https://fzdwx.github.io/tags/ics/</link>
    <description>Recent content in ics on fzdwx</description>
    <image>
      <url>https://fzdwx.github.io/images/party_parrot.gif</url>
      <link>https://fzdwx.github.io/images/party_parrot.gif</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright [fzdwx](https://github.com/fzdwx) since 2022</copyright>
    <lastBuildDate>Sun, 09 Oct 2022 19:40:42 +0800</lastBuildDate><atom:link href="https://fzdwx.github.io/tags/ics/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在Abstract Machine上玩超级马里奥</title>
      <link>https://fzdwx.github.io/posts/2022-10-09-mario-nes/</link>
      <pubDate>Sun, 09 Oct 2022 19:40:42 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-10-09-mario-nes/</guid>
      <description>最近在学习 jyy 的&amp;nbsp; 计算机系统基础习题课 ， 在做&amp;nbsp; pa1 的时候提 到一个运行红白机游戏的&amp;nbsp; 项目 运行起来的效果 遇到的坑:
1.SIGSTKSZ 参数找不到
SIGSTKSZ参数找不到 将SIGSTKSZ修改为一个固定的参数
//uint8_t sigstack[SIGSTKSZ]; uint8_t sigstack[8192]; 2.serial 不正确
serial不正确 修改nemu/src/device/serial.c#init_serial，每个人的不同，我的是 9。</description>
      <content:encoded><![CDATA[<p>最近在学习 jyy 的&nbsp;<a href="http://jyywiki.cn/ICS/2021/" target="_blank" rel="noopener"> 计算机系统基础习题课 </a>
，
在做&nbsp;<a href="https://nju-projectn.github.io/ics-pa-gitbook/ics2021/1.1.html#nemu%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener"> pa1 </a>
的时候提
到一个运行红白机游戏的&nbsp;<a href="https://github.com/NJU-ProjectN/fceux-am" target="_blank" rel="noopener"> 项目 </a>
</p>
<p><figure id="a-/images/4.png" class="align-center">
    <img src="/images/4.png" alt="运行起来的效果"  />
    
    <figcaption>
       运行起来的效果
    </figcaption>
    
</figure></p>
<p>遇到的坑:</p>
<p>1.SIGSTKSZ 参数找不到</p>
<p><figure id="a-/images/5.png" class="align-center">
    <img src="/images/5.png" alt="SIGSTKSZ参数找不到"  />
    
    <figcaption>
       SIGSTKSZ参数找不到
    </figcaption>
    
</figure></p>
<p>将<code>SIGSTKSZ</code>修改为一个固定的参数</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="c1">//uint8_t sigstack[SIGSTKSZ];
</span></span></span><span class="line"><span class="cl"><span class="c1"></span><span class="kt">uint8_t</span> <span class="n">sigstack</span><span class="p">[</span><span class="mi">8192</span><span class="p">];</span>
</span></span></code></pre></div><p>2.serial 不正确</p>
<p><figure id="a-/images/6.png" class="align-center">
    <img src="/images/6.png" alt="serial不正确"  />
    
    <figcaption>
       serial不正确
    </figcaption>
    
</figure></p>
<p>修改<code>nemu/src/device/serial.c#init_serial</code>，每个人的不同，我的是 9。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>C Compile</title>
      <link>https://fzdwx.github.io/posts/2022-10-09-c-compile/</link>
      <pubDate>Sun, 09 Oct 2022 14:10:36 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-10-09-c-compile/</guid>
      <description>宏定义与展开 宏展开: 通过 复制/粘贴 改变代码的形态
一个include的例子 a.c:
#include &amp;lt;stdio.h&amp;gt; int main(){ printf( #include &amp;lt;qwe&amp;gt; ); } qwe:
&amp;#34;hello world\n&amp;#34; 通过运行gcc a.c &amp;amp;&amp;amp; a.out得到
❯ gcc a.c &amp;amp;&amp;amp; a.out hello world 一个define的例子 a.c:
#define A &amp;#34;aaaaaaaaaaaa&amp;#34; #define TEN(A) A A A A A A A A A #define B TEN(A) #define C TEN(B) int main(int argc, char const *argv[]) { puts(C); return 0; } 可以通过gcc a.c -E来查看预编译的结
❯ gcc a.c -E # 0 &amp;#34;a.</description>
      <content:encoded><![CDATA[<h2 id="宏定义与展开">宏定义与展开</h2>
<p>宏展开: 通过 复制/粘贴 改变代码的形态</p>
<h3 id="一个include的例子">一个include的例子</h3>
<p>a.c:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span></span><span class="line"><span class="cl">    <span class="nf">printf</span><span class="p">(</span>
</span></span><span class="line"><span class="cl">        <span class="cp">#include</span> <span class="cpf">&lt;qwe&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>    <span class="p">);</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>qwe:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">&#34;hello world\n&#34;
</span></span></code></pre></div><p>通过运行<code>gcc a.c &amp;&amp; a.out</code>得到</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">❯ gcc a.c &amp;&amp; a.out
</span></span><span class="line"><span class="cl">hello world
</span></span></code></pre></div><h3 id="一个define的例子">一个define的例子</h3>
<p>a.c:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define A &#34;aaaaaaaaaaaa&#34;
</span></span></span><span class="line"><span class="cl"><span class="cp">#define TEN(A) A A A A A A A A A
</span></span></span><span class="line"><span class="cl"><span class="cp">#define B TEN(A)
</span></span></span><span class="line"><span class="cl"><span class="cp">#define C TEN(B)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="nf">puts</span><span class="p">(</span><span class="n">C</span><span class="p">);</span>
</span></span><span class="line"><span class="cl">   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>可以通过<code>gcc a.c -E</code>来查看预编译的结</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">❯ gcc a.c -E
</span></span><span class="line"><span class="cl"># 0 &#34;a.c&#34;
</span></span><span class="line"><span class="cl"># 0 &#34;&lt;built-in&gt;&#34;
</span></span><span class="line"><span class="cl"># 0 &#34;&lt;command-line&gt;&#34;
</span></span><span class="line"><span class="cl"># 1 &#34;/usr/include/stdc-predef.h&#34; 1 3 4
</span></span><span class="line"><span class="cl"># 0 &#34;&lt;command-line&gt;&#34; 2
</span></span><span class="line"><span class="cl"># 1 &#34;a.c&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">int main(int argc, char const *argv[])
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">   puts(&#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34; &#34;aaaaaaaaaaaa&#34;);
</span></span><span class="line"><span class="cl">   return 0;
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><h3 id="修改true定义的例子">修改true定义的例子</h3>
<p>它只在特定的行数时才会为true。</p>
<p>a.c:</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define true (__LINE__ % 2 != 0)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl">   <span class="k">if</span><span class="p">(</span><span class="nb">true</span><span class="p">){</span><span class="nf">printf</span><span class="p">(</span><span class="s">&#34;yes %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__LINE__</span><span class="p">);</span> <span class="p">}</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><h3 id="定义一个宏的参数为函数">定义一个宏的参数为函数</h3>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-c" data-lang="c"><span class="line"><span class="cl"><span class="cp">#define NAMES(x) \
</span></span></span><span class="line"><span class="cl"><span class="cp">   x(Tom) x(Jerry) x(Tyke) x(Spike)
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>
</span></span><span class="line"><span class="cl"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span>
</span></span><span class="line"><span class="cl"><span class="p">{</span>
</span></span><span class="line"><span class="cl">   <span class="cp">#define PRINT(x) puts(&#34;Hello,&#34; #x &#34;!&#34;);
</span></span></span><span class="line"><span class="cl"><span class="cp"></span>   <span class="nf">NAMES</span><span class="p">(</span><span class="n">PRINT</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>可以看到，展开后是调用了4遍。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">❯ gcc -E a.c
</span></span><span class="line"><span class="cl"># 0 &#34;a.c&#34;
</span></span><span class="line"><span class="cl"># 0 &#34;&lt;built-in&gt;&#34;
</span></span><span class="line"><span class="cl"># 0 &#34;&lt;command-line&gt;&#34;
</span></span><span class="line"><span class="cl"># 1 &#34;/usr/include/stdc-predef.h&#34; 1 3 4
</span></span><span class="line"><span class="cl"># 0 &#34;&lt;command-line&gt;&#34; 2
</span></span><span class="line"><span class="cl"># 1 &#34;a.c&#34;
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">int main(int argc, char const *argv[])
</span></span><span class="line"><span class="cl">{
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl">   puts(&#34;Hello,&#34; &#34;Tom&#34; &#34;!&#34;); puts(&#34;Hello,&#34; &#34;Jerry&#34; &#34;!&#34;); puts(&#34;Hello,&#34; &#34;Tyke&#34; &#34;!&#34;); puts(&#34;Hello,&#34; &#34;Spike&#34; &#34;!&#34;);
</span></span><span class="line"><span class="cl">}
</span></span></code></pre></div><h2 id="c程序执行的两个视角">C程序执行的两个视角</h2>
<p>静态: C代码连续的一段总能找到对应一段连续的机器指令
动态: C代码执行的状态总能对应到机器的状态</p>
<ul>
<li>源代码视角: 函数，变量，指针</li>
<li>机器指令视角: 寄存器，内存，地址</li>
</ul>
<p>共同的地方: 内存</p>
<ul>
<li>代码，变量(源代码) = 地址 + 长度(机器指令)</li>
<li>内存 = 代码 + 数据 + 堆栈</li>
</ul>
<p>所以理解C程序执行最重要的就时<strong>内存模型</strong>。</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
