[{"content":"查看当前backlight由什么控制:\n一般都是intel。\nls /sys/class/backlight 查看当前的亮度:\ncat /sys/class/backlight/intel_backlight/max_brightness 修改亮度:\nsudo vim /sys/class/backlight/intel_backlight/brightness or\nsudo chmod 777 /sys/class/backlight/intel_backlight/brightness sudo echo \u0026#39;10000\u0026#39; \u0026gt; /sys/class/backlight/intel_backlight/brightness TODO:\n提供一个命令行功能，来调节亮度 ","permalink":"https://fzdwx.github.io/posts/2022-10-04-backlight/","summary":"由于使用DWM，它不能像KDE那样之间有图形化的亮度调节功能，所以记录一下。","title":"调节linux屏幕的亮度"},{"content":"安装: git clone https://git.suckless.org/dwm cd dwm sudo make clean install 启动 如果已经有了sddm，可以使用sudo systemctl disable sddm.service 来进行关闭，如果到时候不想用了可以用sudo systemctl enable sddm.service来开启sddm。\n# 准备配置文件 cp /etc/X11/xinit/xinitrc ~/.xinitrc vim ~/.xinitrc # 添加 exec dwm # 注释 #twm \u0026amp; #xclock -geometry 50x50-1+1 \u0026amp; #xterm -geometry 80x50+494+51 \u0026amp; #xterm -geometry 80x20+494-0 \u0026amp; #exec xterm -geometry 80x66+0+0 -name login 然后重启并调用startx即可。\n遇到的问题 直接断网 使用NetworkManager进行连接，可能要用到dhcpcd。\nnmcli device wifi list nmcli device wifi connect {{wifi name}} password {{pwd}} 可能会连接失败，你可以试试nmcli connection show 来查看是否存在以前的连接信息，可以用nmcli connection delete {{wifi name}}来删除对应的信息\n输入法失效 添加配置文件\nvim ~/.pam_environment INPUT_METHOD DEFAULT=fcitx5 GTK_IM_MODULE DEFAULT=fcitx5 QT_IM_MODULE DEFAULT=fcitx5 XMODIFIERS DEFAULT=@im=fcitx5 添加启动命令\nvim ~/.xinitrc1 # 在exec dwm之前添加 exec fcitx5 \u0026amp; 扩展屏幕无效 # 可以先查看有哪些屏幕 xrandr # # 将下面的命令加入 ~/.xinitrc1 中，在exec dwm之前添加 # 我有两个，是上下关系，所以用below 其他有 left 以及 right xrandr --output eDP-1-1 --auto --below HDMI-0 常用快捷键 可以参考我配置： https://github.com/fzdwx/dwm MOD -\u0026gt; WIN\n快捷键 desc MOD+SHIFT+ENTER 新开终端 在本tag内切换聚焦窗口 快捷键 desc ALT + tab 切换聚焦窗口 MOD + up 切换聚焦窗口 MOD + down 切换聚焦窗口 跨tag操作 快捷键 desc MOD + left / right 切换tag MOD + SHIGT + left / tight 将当前窗口移动到其他tag MOD + a 第一次是显示所有tag，第二次是跳转到聚焦的窗口所在的窗口 窗口操作 快捷键 desc MOD + q 退出窗口 MOD + h 隐藏窗口 MOD + SHIFT + h 显示窗口（像一个栈一样。） MOD + ENTER 将当前窗口设置为主窗口 MOD + f 将当前窗口全屏 MOD + CTRL + 方向键 移动窗口 MOD + ALT + 方向键 调整窗口大小 MOD + o 只显示当前窗口/显示所有窗口 MOD + t 开启/关闭 聚焦目标的浮动模式 MOD + SHIFT + t 开启/关闭 全部目标的浮动模式 | MOD + SHIFT + f | 开启/关闭 状态栏 |\n切换屏幕 快捷键 desc MOD + x 将鼠标移动到其他屏幕 MOD + SHIFT + X 将当前窗口移动到其他屏幕 Links ArchWiki Dwm Dwm patches Dwm patches中文翻译 picom美化 ","permalink":"https://fzdwx.github.io/posts/2022-09-29-dwm/","summary":"安装: git clone https://git.suckless.org/dwm cd dwm sudo make clean install 启动 如果已经有了sddm，可以使用sudo systemctl disable sddm.service 来进行关闭，如果到时候不想用了可以用sudo systemctl enable sddm.service来开启sddm。\n# 准备配置文件 cp /etc/X11/xinit/xinitrc ~/.xinitrc vim ~/.xinitrc # 添加 exec dwm # 注释 #twm \u0026amp; #xclock -geometry 50x50-1+1 \u0026amp; #xterm -geometry 80x50+494+51 \u0026amp; #xterm -geometry 80x20+494-0 \u0026amp; #exec xterm -geometry 80x66+0+0 -name login 然后重启并调用startx即可。\n遇到的问题 直接断网 使用NetworkManager进行连接，可能要用到dhcpcd。\nnmcli device wifi list nmcli device wifi connect {{wifi name}} password {{pwd}} 可能会连接失败，你可以试试nmcli connection show 来查看是否存在以前的连接信息，可以用nmcli connection delete {{wifi name}}来删除对应的信息","title":"Dwm初体验"},{"content":" 由于最近切换到了linux，不可避免的经常需要使用vi等编辑器，所以这次好好折腾一下。\n我的配置地址: https://github.com/fzdwx/nvim 。\n我的配置 pakcer 我选用的插件管理器是packer，我也不知道选什么好，就按最新的来吧。\n--- setup packer local fn = vim.fn local install_path = fn.stdpath(\u0026#39;data\u0026#39;) .. \u0026#39;/site/pack/packer/start/packer.nvim\u0026#39; if fn.empty(fn.glob(install_path)) \u0026gt; 0 then packer_bootstrap = fn.system({ \u0026#39;git\u0026#39;, \u0026#39;clone\u0026#39;, \u0026#39;--depth\u0026#39;, \u0026#39;1\u0026#39;, \u0026#39;https://github.com/wbthomason/packer.nvim\u0026#39;, install_path }) vim.cmd(\u0026#34;packadd packer.nvim\u0026#34;) end --- add plugins require(\u0026#39;packer\u0026#39;).startup(function(use) -- 自托管 use \u0026#39;wbthomason/packer.nvim\u0026#39; -- 其他插件 -- 如果是第一次则同步 if packer_bootstrap then require(\u0026#39;packer\u0026#39;).sync() end end) alpha 是一个dashboard，也可以说是一个欢迎界面。\nrequire(\u0026#39;packer\u0026#39;).startup(function(use) -- ... --- 添加下面两行进行安装 use \u0026#34;goolord/alpha-nvim\u0026#34;; use \u0026#34;kyazdani42/nvim-web-devicons\u0026#34;; -- ... end) 配置代码太长了就不放了，可以点击这里 这里 参考。\ntelescope 主要作用是文件的查找与预览。\nrequire(\u0026#39;packer\u0026#39;).startup(function(use) -- ... --- 添加下面代码进行安装 use { \u0026#39;nvim-telescope/telescope.nvim\u0026#39;, tag = \u0026#39;0.1.0\u0026#39;, \u0026#34;ahmedkhalf/project.nvim\u0026#34;, \u0026#39;nvim-lua/plenary.nvim\u0026#39;, } -- ... end) 配置 key map 一些教程 Rust and nvim ","permalink":"https://fzdwx.github.io/posts/2022-09-28-neovim-use-notes/","summary":"由于最近切换到了linux，不可避免的经常需要使用vi等编辑器，所以这次好好折腾一下。","title":"Neovim使用记录  "},{"content":" HTTP 1.1之前的实现就不讨论了，因为它们已经过时太久了，我上网的时候就已经接触不到了，所以主要说说HTTP/1.1、HTTP/2。\nHTTP/1.1 HTTP/1.1协议报文简介 CRLF: \\r\\n\nMETHOD: HTTP请求，GET、POST、PUT、DELETE\u0026hellip;\nURI: 统一资源标识符，比如/，/index.html\u0026hellip;\nHTTPVersion: HTTP协议的版本号，比如HTTP/1.1，HTTP/2\nHEADERS: 请求头，比如Host:localhost，Accept: */*。\nBODY: 请求体，比如说一个JSON数据{\u0026quot;name\u0026quot;:\u0026quot;fzdwx\u0026quot;}\nHTTPStatus: HTTP响应状态，常见的有200，404等\nHTTPStatusDesc: HTTP响应状态描述，200对应的OK。\n请求 METHOD\u0026lt;SPACE\u0026gt;URI\u0026lt;SPACE\u0026gt;HTTPVersion HEADERS \u0026lt;CRLF\u0026gt; BODY 示例:\nGET /hello HTTP/1.1 Host: 192.168.1.107:8889 Connection: keep-alive Cache-Control: max-age=0 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.82 Safari/537.36 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9 Accept-Encoding: gzip, deflate Accept-Language: zh-CN,zh;q=0.9 响应 HTTPVersion HTTPStatus HTTPStatusDesc HEADERS \u0026lt;CRLF\u0026gt; BODY 示例:\n如果响应中使用了transfer-encoding: chunked这个来替代Content-Length ，就表示这是一个不固定大小的响应，结尾通常用0\\r\\n来分割。\nHTTP/1.1 200 OK transfer-encoding: chunked content-type: application/json; charset=utf-8 0/r/n HTTP/1.1主要新特性 默认是长连接(Connection: Keep-alive)，支持一个TCP连接处理多个请求。 缓存策略，在请求头中使用Cache-Control，Expires，Last-Modified，ETag等来控制。 允许响应分块，就是上面提到的transfer-encoding: chunked，允许服务端可以多次返回响应体。 但是还是存在一定的问题，比如说如果有一个TCP连接阻塞了，还是会开启新的TCP连接进行处理请求。\nH2 HTTP2中的主要概念:\nConnection: 一个TCP连接包含一个或多个Stream,所有的通讯都在一个TCP连接上完成。 Stream: 一个可以双向通讯的数据流，包含一条或多条Message，每个数据流都一个唯一标识符以及可选的优先级信息。 Message: 对应HTTP/1.1中的请求或响应，包含一条或多条Frame。 Frame: 最小传输单位，它以二进制进行编码。 HTTP通讯简图 在HTTP/1.1中是有Start Line + header + body 组成的，而在H2中是由一个HEADER Frame以及多个DATA Frame组成的。\nHTTP/1.1与H2报文组成的区别 Frame 通常有一些公共的字段，比如Length，Type，Flags以及Stream Id；也各个类型所独有的字段。\n分类如下:\nDATA : 用于传输http消息体。 HEADERS : 用于传输首部字段。 PRIORITY : 用于指定或重新指定引用资源的优先级。 RST_STREAM : 用于通知流的非正常终止。 SETTINGS : 用于约定客户端和服务端的配置数据。比如设置初识的双向流量控制窗口大小。 PUSH_PROMISE : 服务端推送许可。 PING : 用于计算往返时间，执行“ 活性” 检活。 GOAWAY : 用于通知对端停止在当前连接中创建流。 WINDOW_UPDATE : 用于调整个别流或个别连接的流量。 CONTINUATION : 专门用于传递较大 HTTP 头部时的持续帧。 为什么H2必须要走HTTPS？ 这其实在H2标准中没有规定，主要是为了更方便的进行HTTP协议的 升级/协商，确认一个Web服务器是否支持H2通常有两种方式:\n在请求头中设置Upgrade: HTTP/2.0以及Connection: Upgrade,HTTP2-Settings等，类似升级到Websocket。 使用TLS中的ALPN(Application Layer Protocol Negotiation，应用层协议协商)中的ALPN Next Protocol 字段，在Client Hello与Server Hello这个阶段就可以确定下来。 而现在的浏览器基本都是实现的方式二，即与HTTPS绑定在一起。但是如果我们不用浏览器进行访问，当然也可以不用HTTPS。\n详细可参考 。\n为什么H2能实现并行响应请求? 在HTTP/1.1中，请求与响应是一一对应的，在同一个连接里，客户端依次发送两个请求，一段时间以后收到来自服务器的一个响应，这个响应一定是对应于第一个发出去的请求的。 因为没有一个标志来表示哪个响应对应哪个请求。\n而在H2中基于Stream和Frame的设计: 每个Frame都带有Stream Id来标识是否为同一个Stream里面的数据，每个Stream 互不影响，这样就能做到在一个TCP里面连接里面传输多对请求/响应。\nH2的新特性 H2的对HTTP/1.1优化的核心就是 使用尽可能少的连接数。\n多路复用: 只用一个TCP连接就能处理多对 请求/响应 ，不用在开启另外的TCP连接，就是通过Stream与Frame来实现的。 二进制分帧: 使用Frame为最小单位进行通讯，并采用二进制编码。 头部压缩 : 使用HPACK算法进行优化. 维护一份相同的静态字典 ，包含常见的请求头的KV组合 一份动态字典，可以动态的扩容(每个连接单独维护) 支持哈夫曼编码(静态哈夫曼码表 ) 在HTTP/1中消息体可以用gzip进行压缩，但是请求头通常没有任何压缩，有时候请求头的数据可能比请求体的数据还多。\n请求优先级: 一般在HEADERS帧与PRIORITY帧中携带，通常依赖于服务端的支持程度。 工具 生成测试签名 go run $GOROOT/src/crypto/tls/generate_cert.go --host localhost 使用curl调试HTTPS curl https://zcygov.cn -vv Links Hypertext Transfer Protocol Version 2 (HTTP/2) HPACK: Header Compression for HTTP/2 HTTP/2资料汇总 HTTP/2中帧的定义 HTTP/2新的机遇与挑战 探索http1.0到http3.0的发展史，详解http2.0 HTTP/2相比1.0有哪些重大改进 ","permalink":"https://fzdwx.github.io/posts/2022-09-28-http-protocol/","summary":"简介HTTP/1.1与H2。","title":"HTTP协议"},{"content":"看的时候很懵，写的时候更懵，我以为是要写几个MapReduce的程序，在把官方的A few rules以及Hints( 翻译可以看这里 ) 仔细的阅读了几遍后才发现是要写一个 MapReduce 的调度框架。。。\n解题思路可以分为 3 步。\nworker与master先通过rpc进行通信，即worker发送请求，master能够正确的应答且worker 能够收到。这一部分其实示例代码已经给到了，可以模仿着写一个从master获取需要执行的任务名称的rpc request。 上面一步完成后就可以进行真正的Map task请求以及执行了: Map task何时生成？ 每个worker只向master请求一次就好了吗？ Map task执行 超时/失败 需要有重试机制吗？ 如何保证Map task消费时的线程安全？ 当所有的Map task执行完毕后就需要执行Reduce task了，如果你写完了第 2 步，那么Reduce task其实就是水到渠成了。 生成Reduce task，这里的每个Reduce task需要加载的文件按什么分成一组？ 剩下的与Map task处理方法相同。 我就是卡在了Reduce task创建时文件分组这个地方了，我直接把同一个Map task生成的文件当成一组了\u0026hellip;但是显然不是这样。\n","permalink":"https://fzdwx.github.io/posts/2022-09-27-mit6.824-lab1/","summary":"about mit6.824 lab1(Map reduce framework)","title":"Mit6.824 lab1思路"},{"content":" 今天发现了一个 linux 下的 application launcher rofi ，它可以快速切换窗口和启动程序， 我用它和wmctrl进行配合使用。\n我的使用过程:\n1.Archlinux install\nyay -S rofi 2.添加自定义快捷键绑定 hotkey 为alt+space触发rofi -show。\n3.pressalt+space，然后使用shift+leftorright进行切换 mode 。\n更改主题以及显示 icon:\n1.生成配置文件\nmkdir -p ~/.config/rofi rofi -dump-config \u0026gt; ~/.config/rofi/config.rasi 2.显示icon\nsed -i \u0026#39;8c show-icons: true;\u0026#39; ~/.config/rofi/config.rasi 3.更换主题\n参考 https://github.com/lr-tech/rofi-themes-collection#installing-themes 我的wmctrl的配置示例:\n使用xprop WM_CLASS获取前缀。\nalias chrome=\u0026#34;wmctrl -x -a google-chrome || google-chrome-stable \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34; alias note=\u0026#34;wmctrl -x -a obsidian || /usr/bin/obsidian \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34; alias codew=\u0026#34;wmctrl -x -a code || /opt/code/code \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34; alias idea=\u0026#34;wmctrl -x -a jetbrains-idea || /opt/idea/bin/idea.sh \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34; alias discord=\u0026#34;wmctrl -x -a discord || /opt/discord/Discord \u0026gt; /dev/null 2\u0026gt;\u0026amp;1 \u0026amp;\u0026#34; ","permalink":"https://fzdwx.github.io/posts/2022-09-18-about-rofi/","summary":"一个 linux 下的 application launcher, 让你只用键盘就可以进行应用的启动与切换。","title":"About rofi"},{"content":"","permalink":"https://fzdwx.github.io/flomo/","summary":"","title":""},{"content":"","permalink":"https://fzdwx.github.io/startpage/","summary":"","title":"StartPage"}]