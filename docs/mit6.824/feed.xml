<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>mit6.824 on fzdwx</title>
    <link>https://fzdwx.github.io/docs/mit6.824/</link>
    <description>Recent content in mit6.824 on fzdwx</description>
    <image>
      <url>https://fzdwx.github.io/images/party_parrot.gif</url>
      <link>https://fzdwx.github.io/images/party_parrot.gif</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright [fzdwx](https://github.com/fzdwx)   since 2022</copyright>
    <lastBuildDate>Tue, 27 Sep 2022 21:45:29 +0800</lastBuildDate><atom:link href="https://fzdwx.github.io/docs/mit6.824/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MapReduce 框架实现思路</title>
      <link>https://fzdwx.github.io/document/2022-09-27-mit6.824-lab1/</link>
      <pubDate>Tue, 27 Sep 2022 21:45:29 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/document/2022-09-27-mit6.824-lab1/</guid>
      <description>about mit6.824 lab1(Map reduce framework)</description>
      <content:encoded><![CDATA[<p>看的时候很懵,写的时候更懵,我以为是要写几个<code>MapReduce</code>的程序,在把官方的<code>A few rules</code>以及<code>Hints</code>(
翻译可以看&nbsp;<a href="https://www.nowcoder.com/discuss/962675" target="_blank" rel="noopener">这里</a>
) 仔细的阅读了几遍后才发现是要写一个
MapReduce 的调度框架&hellip;</p>
<p>解题思路可以分为 3 步.</p>
<ol>
<li><code>worker</code>与<code>master</code>先通过<code>rpc</code>进行通信,即<code>worker</code>发送请求,<code>master</code>能够正确的应答且<code>worker</code>
能够收到.这一部分其实示例代码已经给到了,可以模仿着写一个从<code>master</code>获取需要执行的任务名称的<code>rpc request</code>.</li>
<li>上面一步完成后就可以进行真正的<code>Map task</code>请求以及执行了:
<ul>
<li><code>Map task</code>何时生成？</li>
<li>每个<code>worker</code>只向<code>master</code>请求一次就好了吗？</li>
<li><code>Map task</code>执行 超时/失败 需要有重试机制吗？</li>
<li>如何保证<code>Map task</code>消费时的线程安全？</li>
</ul>
</li>
<li>当所有的<code>Map task</code>执行完毕后就需要执行<code>Reduce task</code>了,如果你写完了第 2 步,那么<code>Reduce task</code>其实就是水到渠成了.
<ul>
<li>生成<code>Reduce task</code>,这里的每个<code>Reduce task</code>需要加载的文件按什么分成一组？</li>
<li>剩下的与<code>Map task</code>处理方法相同.</li>
</ul>
</li>
</ol>
<hr>
<p>我就是卡在了<code>Reduce task</code>创建时文件分组这个地方了,我直接把同一个<code>Map task</code>生成的文件当成一组了&hellip;但是显然不是这样.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
