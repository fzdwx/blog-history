<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>fzdwx</title>
    <link>https://fzdwx.github.io/</link>
    <description>Recent content on fzdwx</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright [fzdwx](https://github.com/fzdwx) since 2022</copyright>
    <lastBuildDate>Wed, 28 Sep 2022 15:59:37 +0800</lastBuildDate><atom:link href="https://fzdwx.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Neovim使用记录  </title>
      <link>https://fzdwx.github.io/posts/2022-09-28-neovim-use-notes/</link>
      <pubDate>Wed, 28 Sep 2022 15:59:37 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-09-28-neovim-use-notes/</guid>
      <description>由于最近切换到了linux，不可避免的经常需要使用vi等编辑器，所以这次好好折腾一下。
我的配置地址: https://github.com/fzdwx/nvim。
我的配置 pakcer 我选用的插件管理器是packer，我也不知道选什么好，就按最新的来吧。
--- setup packer local fn = vim.fn local install_path = fn.stdpath(&amp;#39;data&amp;#39;) .. &amp;#39;/site/pack/packer/start/packer.nvim&amp;#39; if fn.empty(fn.glob(install_path)) &amp;gt; 0 then packer_bootstrap = fn.system({ &amp;#39;git&amp;#39;, &amp;#39;clone&amp;#39;, &amp;#39;--depth&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;https://github.com/wbthomason/packer.nvim&amp;#39;, install_path }) vim.cmd(&amp;#34;packadd packer.nvim&amp;#34;) end --- add plugins require(&amp;#39;packer&amp;#39;).startup(function(use) -- 自托管 use &amp;#39;wbthomason/packer.nvim&amp;#39; -- 其他插件 -- 如果是第一次则同步 if packer_bootstrap then require(&amp;#39;packer&amp;#39;).sync() end end) alpha 是一个dashboard，也可以说是一个欢迎界面，了解详情。
require(&amp;#39;packer&amp;#39;).startup(function(use) -- ... --- 添加下面两行进行安装 use &amp;#34;goolord/alpha-nvim&amp;#34;; use &amp;#34;kyazdani42/nvim-web-devicons&amp;#34;; -- ... end) 配置代码太长了就不放了，可以点击这里 这里 参考。</description>
      <content:encoded><![CDATA[<blockquote>
<p>由于最近切换到了linux，不可避免的经常需要使用vi等编辑器，所以这次好好折腾一下。</p>
</blockquote>
<p>我的配置地址: <a href="https://github.com/fzdwx/nvim">https://github.com/fzdwx/nvim</a>。</p>
<h2 id="我的配置">我的配置</h2>
<h3 id="pakcer">pakcer</h3>
<p>我选用的插件管理器是<code>packer</code>，我也不知道选什么好，就按最新的来吧。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="c1">--- setup packer</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">fn</span> <span class="o">=</span> <span class="n">vim.fn</span>
</span></span><span class="line"><span class="cl"><span class="kd">local</span> <span class="n">install_path</span> <span class="o">=</span> <span class="n">fn.stdpath</span><span class="p">(</span><span class="s1">&#39;data&#39;</span><span class="p">)</span> <span class="o">..</span> <span class="s1">&#39;/site/pack/packer/start/packer.nvim&#39;</span>
</span></span><span class="line"><span class="cl">
</span></span><span class="line"><span class="cl"><span class="kr">if</span> <span class="n">fn.empty</span><span class="p">(</span><span class="n">fn.glob</span><span class="p">(</span><span class="n">install_path</span><span class="p">))</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">    <span class="n">packer_bootstrap</span> <span class="o">=</span> <span class="n">fn.system</span><span class="p">({</span> <span class="s1">&#39;git&#39;</span><span class="p">,</span> <span class="s1">&#39;clone&#39;</span><span class="p">,</span> <span class="s1">&#39;--depth&#39;</span><span class="p">,</span> <span class="s1">&#39;1&#39;</span><span class="p">,</span> <span class="s1">&#39;https://github.com/wbthomason/packer.nvim&#39;</span><span class="p">,</span> <span class="n">install_path</span> <span class="p">})</span>
</span></span><span class="line"><span class="cl">    <span class="n">vim.cmd</span><span class="p">(</span><span class="s2">&#34;packadd packer.nvim&#34;</span><span class="p">)</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="c1">--- add plugins</span>
</span></span><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;packer&#39;</span><span class="p">).</span><span class="n">startup</span><span class="p">(</span><span class="kr">function</span><span class="p">(</span><span class="n">use</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- 自托管</span>
</span></span><span class="line"><span class="cl">    <span class="n">use</span> <span class="s1">&#39;wbthomason/packer.nvim&#39;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- 其他插件</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- 如果是第一次则同步</span>
</span></span><span class="line"><span class="cl">    <span class="kr">if</span> <span class="n">packer_bootstrap</span> <span class="kr">then</span>
</span></span><span class="line"><span class="cl">        <span class="n">require</span><span class="p">(</span><span class="s1">&#39;packer&#39;</span><span class="p">).</span><span class="n">sync</span><span class="p">()</span>
</span></span><span class="line"><span class="cl">    <span class="kr">end</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span><span class="p">)</span>
</span></span></code></pre></div><h3 id="alpha">alpha</h3>
<p>是一个dashboard，也可以说是一个欢迎界面，<a href="https://github.com/goolord/alpha-nvim">了解详情</a>。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;packer&#39;</span><span class="p">).</span><span class="n">startup</span><span class="p">(</span><span class="kr">function</span><span class="p">(</span><span class="n">use</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- ...</span>
</span></span><span class="line"><span class="cl">    <span class="c1">--- 添加下面两行进行安装</span>
</span></span><span class="line"><span class="cl">    <span class="n">use</span> <span class="s2">&#34;goolord/alpha-nvim&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="n">use</span> <span class="s2">&#34;kyazdani42/nvim-web-devicons&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- ...</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span><span class="p">)</span>
</span></span></code></pre></div><p>配置代码太长了就不放了，可以点击这里<a href="https://github.com/fzdwx/nvim/blob/main/lua/config/plugins/alpha.lua"> 这里 </a>参考。</p>
<h3 id="telescope">telescope</h3>
<p>主要作用是文件的查找与预览。</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-lua" data-lang="lua"><span class="line"><span class="cl"><span class="n">require</span><span class="p">(</span><span class="s1">&#39;packer&#39;</span><span class="p">).</span><span class="n">startup</span><span class="p">(</span><span class="kr">function</span><span class="p">(</span><span class="n">use</span><span class="p">)</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- ...</span>
</span></span><span class="line"><span class="cl">    <span class="c1">--- 添加下面代码进行安装</span>
</span></span><span class="line"><span class="cl">    <span class="n">use</span> <span class="p">{</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;nvim-telescope/telescope.nvim&#39;</span><span class="p">,</span> <span class="n">tag</span> <span class="o">=</span> <span class="s1">&#39;0.1.0&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s2">&#34;ahmedkhalf/project.nvim&#34;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">        <span class="s1">&#39;nvim-lua/plenary.nvim&#39;</span><span class="p">,</span>
</span></span><span class="line"><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="cl">    <span class="c1">-- ...</span>
</span></span><span class="line"><span class="cl"><span class="kr">end</span><span class="p">)</span>
</span></span></code></pre></div><ul>
<li><a href="https://github.com/fzdwx/nvim/blob/main/lua/config/plugins/telescope.lua">配置</a></li>
<li><a href="https://github.com/fzdwx/nvim/blob/main/lua/config/key/init.lua#L34-L52">key map</a></li>
</ul>
<h2 id="一些教程">一些教程</h2>
<ol>
<li><a href="https://rsdlt.github.io/posts/rust-nvim-ide-guide-walkthrough-development-debug/">Rust and nvim</a></li>
</ol>
]]></content:encoded>
    </item>
    
    <item>
      <title>HTTP协议</title>
      <link>https://fzdwx.github.io/posts/2022-09-28-http-protocol/</link>
      <pubDate>Wed, 28 Sep 2022 12:19:15 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-09-28-http-protocol/</guid>
      <description> HTTP 1.1之前的实现就不讨论了，因为它们已经过时太久了，我上网的时候就已经接触不到了，所以主要说说HTTP/1.1、HTTP/2。
HTTP协议报文简介 CRLF: \r\n
METHOD: HTTP请求，GET、POST、PUT、DELETE&amp;hellip;
URI: 统一资源标识符，比如/，/index.html&amp;hellip;
HTTPVersion: HTTP协议的版本号，比如HTTP/1.1，HTTP/2
METHOD&amp;lt;SPACE&amp;gt;URI&amp;lt;SPACE&amp;gt;HTTPVersion&amp;lt;CRLF&amp;gt; 生成测试签名 go run $GOROOT/src/crypto/tls/generate_cert.go --host localhost Links HTTP/2 资料汇总 HTTP/2 新的机遇与挑战 探索http1.0到http3.0的发展史，详解http2.0 HTTP/2 相比 1.0 有哪些重大改进 </description>
      <content:encoded><![CDATA[<blockquote>
<p>HTTP 1.1之前的实现就不讨论了，因为它们已经过时太久了，我上网的时候就已经接触不到了，所以主要说说HTTP/1.1、HTTP/2。</p>
</blockquote>
<h2 id="http协议报文简介">HTTP协议报文简介</h2>
<blockquote>
<p>CRLF: <code>\r\n</code></p>
<p>METHOD: HTTP请求，<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>&hellip;</p>
<p>URI: 统一资源标识符，比如<code>/</code>，<code>/index.html</code>&hellip;</p>
<p>HTTPVersion: HTTP协议的版本号，比如<code>HTTP/1.1</code>，<code>HTTP/2</code></p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-text" data-lang="text"><span class="line"><span class="cl">METHOD&lt;SPACE&gt;URI&lt;SPACE&gt;HTTPVersion&lt;CRLF&gt;
</span></span></code></pre></div><h2 id="生成测试签名">生成测试签名</h2>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">go run <span class="nv">$GOROOT</span>/src/crypto/tls/generate_cert.go --host localhost
</span></span></code></pre></div><h2 id="links">Links</h2>
<ul>
<li><a href="https://imququ.com/post/http2-resource.html">HTTP/2 资料汇总</a></li>
<li><a href="https://www.dropbox.com/s/4duv6cqrhud4qzw/HTTP2%EF%BC%9A%E6%96%B0%E7%9A%84%E6%9C%BA%E9%81%87%E4%B8%8E%E6%8C%91%E6%88%98.pdf?dl=0">HTTP/2 新的机遇与挑战</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/566351358">探索http1.0到http3.0的发展史，详解http2.0</a></li>
<li><a href="https://www.zhihu.com/question/34074946/answer/2264788574">HTTP/2 相比 1.0 有哪些重大改进</a></li>
</ul>
]]></content:encoded>
    </item>
    
    <item>
      <title>Mit6.824 lab1思路</title>
      <link>https://fzdwx.github.io/posts/2022-09-27-mit6.824-lab1/</link>
      <pubDate>Tue, 27 Sep 2022 21:45:29 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-09-27-mit6.824-lab1/</guid>
      <description>about mit6.824 lab1(Map reduce framework)</description>
      <content:encoded><![CDATA[<p>看的时候很懵，写的时候更懵，我以为是要写几个<code>MapReduce</code>的程序，在把官方的<code>A few rules</code>以及<code>Hints</code>(
翻译可以看<a href="https://www.nowcoder.com/discuss/962675">这里</a>) 仔细的阅读了几遍后才发现是要写一个
MapReduce 的调度框架。。。</p>
<p>解题思路可以分为 3 步。</p>
<ol>
<li><code>worker</code>与<code>master</code>先通过<code>rpc</code>进行通信，即<code>worker</code>发送请求，<code>master</code>能够正确的应答且<code>worker</code>
能够收到。这一部分其实示例代码已经给到了，可以模仿着写一个从<code>master</code>获取需要执行的任务名称的<code>rpc request</code>。</li>
<li>上面一步完成后就可以进行真正的<code>Map task</code>请求以及执行了:
<ul>
<li><code>Map task</code>何时生成？</li>
<li>每个<code>worker</code>只向<code>master</code>请求一次就好了吗？</li>
<li><code>Map task</code>执行 超时/失败 需要有重试机制吗？</li>
<li>如何保证<code>Map task</code>消费时的线程安全？</li>
</ul>
</li>
<li>当所有的<code>Map task</code>执行完毕后就需要执行<code>Reduce task</code>了，如果你写完了第 2 步，那么<code>Reduce task</code>其实就是水到渠成了。
<ul>
<li>生成<code>Reduce task</code>，这里的每个<code>Reduce task</code>需要加载的文件按什么分成一组？</li>
<li>剩下的与<code>Map task</code>处理方法相同。</li>
</ul>
</li>
</ol>
<hr>
<p>我就是卡在了<code>Reduce task</code>创建时文件分组这个地方了，我直接把同一个<code>Map task</code>生成的文件当成一组了&hellip;但是显然不是这样。</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>About rofi</title>
      <link>https://fzdwx.github.io/posts/2022-09-18-about-rofi/</link>
      <pubDate>Sun, 18 Sep 2022 22:15:39 +0800</pubDate>
      
      <guid>https://fzdwx.github.io/posts/2022-09-18-about-rofi/</guid>
      <description>一个 linux 下的 application launcher, 让你只用键盘就可以进行应用的启动与切换。</description>
      <content:encoded><![CDATA[<blockquote>
<p>今天发现了一个 linux 下的 application launcher <a href="https://github.com/davatorium/rofi">rofi</a> ，它可以快速切换窗口和启动程序，
我用它和<code>wmctrl</code>进行配合使用。</p>
</blockquote>
<p><strong>我的使用过程:</strong></p>
<p>1.Archlinux install</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">yay -S rofi
</span></span></code></pre></div><p>2.添加自定义快捷键绑定 hotkey 为<code>alt</code>+<code>space</code>触发<code>rofi -show</code>。</p>
<p>3.press<code>alt</code>+<code>space</code>，然后使用<code>shift</code>+<code>left</code>or<code>right</code>进行切换 mode 。</p>
<hr>
<p><strong>更改主题以及显示 icon</strong>:</p>
<p>1.生成配置文件</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">mkdir -p ~/.config/rofi
</span></span><span class="line"><span class="cl">rofi -dump-config &gt; ~/.config/rofi/config.rasi
</span></span></code></pre></div><p>2.显示icon</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl">sed -i <span class="s1">&#39;8c show-icons: true;&#39;</span> ~/.config/rofi/config.rasi
</span></span></code></pre></div><p>3.更换主题</p>
<p>参考 <a href="https://github.com/lr-tech/rofi-themes-collection#installing-themes">https://github.com/lr-tech/rofi-themes-collection#installing-themes</a></p>
<hr>
<p><strong>我的<code>wmctrl</code>的配置示例</strong>:</p>
<blockquote>
<p>使用<code>xprop WM_CLASS</code>获取前缀。</p>
</blockquote>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-shell" data-lang="shell"><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">chrome</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a google-chrome || google-chrome-stable &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">note</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a obsidian || /usr/bin/obsidian &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">codew</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a code || /opt/code/code &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">idea</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a jetbrains-idea || /opt/idea/bin/idea.sh &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span><span class="line"><span class="cl"><span class="nb">alias</span> <span class="nv">discord</span><span class="o">=</span><span class="s2">&#34;wmctrl -x -a discord || /opt/discord/Discord &gt; /dev/null 2&gt;&amp;1 &amp;&#34;</span>
</span></span></code></pre></div>]]></content:encoded>
    </item>
    
  </channel>
</rss>
